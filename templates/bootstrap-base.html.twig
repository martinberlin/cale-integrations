{% set http_host = app.request.getSchemeAndHttpHost()|replace({'www.': ''}) %}
{% set the_route = app.request.attributes.get('_route') %}
{% set currentPath = path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params'))  %}

<!DOCTYPE html>
<!--[if IE 7]><html class="ie ie7" lang="en"><![endif]-->
<!--[if IE 8]><html class="ie ie8" lang="en"><![endif]-->
<!--[if IE 9]><html class="ie ie9" lang="en"><![endif]-->

<!--[if gte IE 10 | !IE ]><!--> <html lang="en"> <!--<![endif]-->

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="{{ 'meta_description'|trans }}">

  {% if the_route != 'reset_password_confirm' %}
    {% set canonical = http_host ~ currentPath %}
    <link rel=”canonical” href=”{{ canonical }}">
  {% endif %}

  <title>{% if title is defined %}CALE {{title}}{% else %}CALE Screen manager{% endif %}</title>


  {# Bootstrap 3 core CSS #}
  {% if app.environment != 'dev' %}
    <link href="{{ cdn_s3 }}/css/bootstrap.min.css" rel="stylesheet">
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-161455060-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-161455060-1');
      gtag('config', 'AW-1065885836');
    </script>
  {% else %}
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  {% endif %}
  <link href="/css/theme.css" rel="stylesheet">

  {% block stylesheets %}{% endblock %}

  <script src="/js/polyfill.min.js"></script>
  <!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <![endif]-->
  <style>
    @import url('https://fonts.googleapis.com/css?family=Asap&display=swap');
  </style>
</head>
<body>
    <div class="navbar-wrapper">
      <div class="navbar navbar-inverse navbar-fixed-top bg-bootstrap" role="navigation">

        <div class="navbar-header">
          <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target="#bs-navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a href="https://github.com/thednp/bootstrap.native/" data-toggle="tooltip" data-placement="bottom" class="navbar-brand" title="&lt;b&gt;Native JavaScript for Bootstrap&lt;/b&gt;&lt;br&gt;The sweetest Vanilla JavaScript library for everyone">
            <svg class="d-inline-block align-top" width="36" height="36" viewBox="0 0 612 612" xmlns="http://www.w3.org/2000/svg" focusable="false"><title>Bootstrap</title>
              <path fill="currentColor" d="M510 8a94.3 94.3 0 0 1 94 94v408a94.3 94.3 0 0 1-94 94H102a94.3 94.3 0 0 1-94-94V102a94.3 94.3 0 0 1 94-94h408m0-8H102C45.9 0 0 45.9 0 102v408c0 56.1 45.9 102 102 102h408c56.1 0 102-45.9 102-102V102C612 45.9 566.1 0 510 0z"></path><path fill="currentColor" d="M196.77 471.5V154.43h124.15c54.27 0 91 31.64 91 79.1 0 33-24.17 63.72-54.71 69.21v1.76c43.07 5.49 70.75 35.82 70.75 78 0 55.81-40 89-107.45 89zm39.55-180.4h63.28c46.8 0 72.29-18.68 72.29-53 0-31.42-21.53-48.78-60-48.78h-75.57zm78.22 145.46c47.68 0 72.73-19.34 72.73-56s-25.93-55.37-76.46-55.37h-74.49v111.4z"></path>
            </svg>
            <span class="hidden-xs d-inline-block align-middle">Native JavaScript for Bootstrap</span>
          </a>
        </div>
        <nav id="bs-navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li><a href="v4.html" data-toggle="tooltip" title="Switch to V4">V4</a></li>
            <li class="dropdown"><a href="#" data-toggle="dropdown" aria-expanded="false">Github <span class="caret"></span></a>
              <ul class="dropdown-menu">
                <li><a href="https://github.com/thednp/bootstrap.native/">Fork</a></li>
                <li><a href="https://github.com/thednp/bootstrap.native/wiki">Wiki</a></li>
                <li><a href="https://github.com/thednp/bootstrap.native/archive/master.zip">Download</a></li>
              </ul>
            </li>
            <li class="dropdown"><a href="#" data-toggle="dropdown" aria-expanded="false">Share <span class="caret"></span></a>
              <ul class="dropdown-menu">
                <li><a target="_blank" rel="noreferrer" href="https://www.facebook.com/sharer/sharer.php?u=http://thednp.github.io/bootstrap.native/index.html" title="Share Native JavaScript for Bootstrap on Facebook">Facebook</a></li>
                <li>
                  <a target="_blank" rel="noreferrer"
                    href="https://twitter.com/home?status=Spread the word about %23BootstrapNative by @dnp_theme and download here http://thednp.github.io/bootstrap.native/index.html"
                    title="Share Native JavaScript for Bootstrap on Twitter">Twitter</a>
                </li>
              </ul>
            </li>
          </ul>
        </nav>
      </div>
    </div>

    <div id="myCarousel" class="carousel slide" data-ride="carousel" data-keyboard="true" data-pause="hover" data-interval="7000">
      <ol class="carousel-indicators">
        <li data-toggle="tooltip" data-title="Download Native JavaScript for Bootstrap" data-target="#myCarousel" data-slide-to="0" class="active"></li>
        <li data-toggle="tooltip" data-title="Getting started with Native JavaScript" data-target="#myCarousel" data-slide-to="1"></li>
        <li data-toggle="tooltip" data-title="HTML5 inside" data-target="#myCarousel" data-slide-to="2"></li>
        <li data-toggle="tooltip" data-title="Why BSN?" data-target="#myCarousel" data-slide-to="3"></li>
        <li data-toggle="tooltip" data-title="Scroll To Carousel" data-target="#myCarousel" data-slide-to="4"></li>
      </ol>
      <div class="carousel-inner">
        <div class="item active">
          <div class="item-bg bg-primary"></div>
          <div class="container">
            <div class="carousel-caption slide">
              <h2>A better way to Bootstrap</h2>
              <p>The jQuery plugins for Bootstrap 3 redeveloped with native JavaScript, providing same basic functionality, but lighter in size and delivering higher performance for your application.</p>
              <p><a class="btn btn-lg btn-default btn-empty" href="https://github.com/thednp/bootstrap.native/archive/master.zip">Download</a> <a class="btn btn-lg btn-info" rel="noreferrer" href="https://github.com/thednp/bootstrap.native/wiki" target="_blank" role="button">Wiki</a></p>
            </div>
          </div>
        </div>
        <div class="item">
          <div class="item-bg bg-pink"></div>
          <div class="container">
            <div class="carousel-caption">
              <h2>New to native JavaScript?</h2>
              <p>Have no worry, the internet is full of scripts and tutorials, <a href="http://vanilla-js.com/" rel="noreferrer" target="_blank">native JavaScript</a> is the coolest programing language ever! Far more powerful and
                requires almost <b>zero</b> maintenance on very long periods of time.</p>
              <p><a class="btn btn-lg btn-default btn-empty" href="http://blog.garstasio.com/you-dont-need-jquery/" rel="noreferrer" target="_blank" role="button">Get started</a>
                <a class="btn btn-lg btn-default btn-empty" href="http://jstherightway.org" role="button" rel="noreferrer" target="_blank">Full Reference</a></p>
            </div>
          </div>
        </div>
        <div class="item">
          <div class="item-bg bg-indigo"></div>
          <div class="container">
            <div class="carousel-caption">
              <h2>HTML5 inside</h2>
              <p>This library have been developed for today's standards, for a workflow careless about legacy browsers thanks to <a rel="noreferrer" href="https://polyfill.io" target="_blank">polyfill services</a> and other
                available options to support legacy browsers.</p>
              <p><a class="btn btn-lg btn-default btn-empty" href="https://github.com/thednp/bootstrap.native/wiki/Browser-support" role="button">More</a></p>
            </div>
          </div>
        </div>
        <div class="item">
          <div class="item-bg bg-purple"></div>
          <div class="container">
            <div class="carousel-caption">
              <h2>What's the fuzz?</h2>
              <p>If you use mainly Bootstrap plugins in your projects, you may drop jQuery right away. Why load jQuery if you don't really need it? It's too old school!</p>
              <p><a class="btn btn-lg btn-default btn-empty" rel="noreferrer" href="http://jsperf.com/jquery-vs-native-element-performance" target="_blank" role="button">See Now</a></p>
            </div>
          </div>
        </div>
        <div class="item">
          <div class="item-bg bg-red"></div>
          <div class="container">
            <div class="carousel-caption">
              <h2>This was a <b>Carousel</b> example</h2>
              <p>One component of this library that works just as the original jQuery plugin but with much less amount of code, higher code quality and with some smart optimizations.</p>
              <p><a class="btn btn-lg btn-default btn-empty" href="#componentCarousel" role="button">How to use</a></p>
            </div>
          </div>
        </div>
      </div>

    <a href="#myCarousel" class="left carousel-control" data-slide="prev"><span class="glyphicon glyphicon-chevron-left"></span></a>
    <a href="#myCarousel" class="right carousel-control" data-slide="next"><span class="glyphicon glyphicon-chevron-right"></span></a>

  </div>

  <div id="main-container" class="container">
    <div class="row">
      <div id="container-content-column" class="col-sm-9" data-spy="scroll" data-target="#side-nav" data-offset="80">
        <section id="use">
          <h2>Read First</h2>
          <p>Welcome to the demo page! Before you do anything, please make sure to check the <a href="https://github.com/thednp/bootstrap.native/wiki">Wiki pages</a>, as they give you a quick start with using the library and also provide a good set of valuable guides on how to get the best out of it.</p>

          <div class="list-group">
            <a class="list-group-item" href="https://github.com/thednp/bootstrap.native/wiki/Acknowledgements">
              <h4 class="list-group-item-heading">Acknowledgements</h4>
              <p class="list-group-item-text">A quick note on some of the similarities and differences with the original jQuery plugins. Nothing to worry about, but still good to know all the tricks on how to maximize your workflow.</p>
            </a>
            <a class="list-group-item" href="https://github.com/thednp/bootstrap.native/wiki/How-to-use">
              <h4 class="list-group-item-heading">How to use</h4>
              <p class="list-group-item-text">An indepth guide on how to use it with stuff like <code>npm</code>, <code>RequireJS</code> or <b>CDN</b> links.</p>
            </a>
            <a class="list-group-item" href="https://github.com/thednp/bootstrap.native/wiki/FAQs">
              <h4 class="list-group-item-heading">FAQs</h4>
              <p class="list-group-item-text">A short list of frequent asked questions regarding the use of the library.</p>
            </a>
            <a class="list-group-item" href="https://github.com/thednp/bootstrap.native/wiki/Browser-support">
              <h4 class="list-group-item-heading">Browser Support</h4>
              <p class="list-group-item-text">A word on how to enable the library for legacy browsers.</p>
            </a>
            <a class="list-group-item" href="https://github.com/thednp/bootstrap.native/wiki/About">
              <h4 class="list-group-item-heading">About</h4>
              <p class="list-group-item-text">Learn about the <code>bootstrap.native</code> project inception, goals and motivations.</p>
            </a>
          </div>

          <p>And now, let's get down to business!</p>
        </section>

        <section id="components">
          <h2>Components</h2>
          <section id="componentModal">
            <h3>Modal</h3>
            <p>The <b>Modal</b> component works exactly as the original in most regards, with minor exceptions on options, events and public methods. It provides both an initialization option and a public method to write directly into your modal content.</p>
            <p>In addition to adapting the spacing (padding) of the <code>&lt;body&gt;</code> elements like <code>&lt;nav class="navbar-fixed-top"&gt;</code> are also adapted in the same manner to get the smoothest possible transition. Like all components of the library, the component has the ability to provide access to the initialization even if your modal is setup via DATA API.</p>
            <section id="modalOptions">
              <h4>Options</h4>
              <p>The <code>remote</code> option have been removed in Bootstrap 4 and we already replaced it with a better option. We also skipped the <code>show</code> option because via JavaScript we quickly and easily access
                the component's public methods right after initialiation, we'll have a look in a minute.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                      <td><code>backdrop</code></td>
                      <td><em>boolean</em> or the <em>string</em> <code>'static'</code></td>
                      <td>true</td>
                      <td>Includes a modal-backdrop element. Alternatively, specify <code>'static'</code> for a backdrop which doesn't close the modal on click.</td>
                    </tr>
                    <tr>
                      <td><code>keyboard</code></td>
                      <td><em>boolean</em></td>
                      <td>true</td>
                      <td>Option to dismiss the current modal via <kbd>Esc</kbd> key.</td>
                    </tr>
                    <tr>
                      <td><code>content</code></td>
                      <td><em>markup</em></td>
                      <td></td>
                      <td>The <b>Modal</b> component comes with a template system instead of a load <b>remote</b> content function (Bootstrap 4 drops it). This option can be used with JavaScript only.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <p>The default options' values are same as their jQuery plugin equivalents so you can expect same behavior.</p>
            </section>
            <section id="modalMethods">
            <h4>Methods</h4>
              <p>For further control the <b>Modal</b> component exposes a couple of public methods to be used via JavaScript :</p>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.show()</h4>
                  <p class="list-group-item-text">The method that shows an initialized modal. When called, it will also hide any other visible modal before showing the one requested, making sure to keep the backdrop in place.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.hide()</h4>
                  <p class="list-group-item-text">This hides an initialized modal. Additionally it will also close (if enabled) the backdrop.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.toggle()</h4>
                  <p class="list-group-item-text">When called it shows the modal if hidden and hides it otherwise, using the above two methods.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.setContent()</h4>
                  <p class="list-group-item-text">The method to enable you to set/override the content of <code>&lt;div class="modal-content"&gt;</code> element of your modal at any time, but you might want to avoid
                    using this method while the modal is animating.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.update()</h4>
                  <p class="list-group-item-text">This allows you to update the modal layout (handling overflowing/non-overflowing body and/or modal) after you have changed it's content or other layout changes occured.
                    This would naturally follow the previous <code>.setContent()</code> method.</p>
                </div>
              </div>

            </section>
            <section id="modalEvents">
              <h4>Events</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>show.bs.modal</code></td>
                      <td>This event fires immediately when the <code>.show()</code> instance method is called. If caused by a click and the clicked element is a modal triggering element, that element is available
                        as the <code>event.relatedTarget</code> property of the event.</td>
                    </tr>
                    <tr>
                      <td><code>shown.bs.modal</code></td>
                      <td>This event is fired when the modal has been made visible to the user. The <code>event.relatedTarget</code> is same as for the above.</td>
                    </tr>
                    <tr>
                      <td><code>hide.bs.modal</code></td>
                      <td>This event is fired immediately when the <code>.hide()</code> instance method has been called.</td>
                    </tr>
                    <tr>
                      <td><code>hidden.bs.modal</code></td>
                      <td>This event is fired when the modal has finished being hidden from the user.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <p>The <code>loaded.bs.modal</code> original event is not needed, also because we replaced the <code>remote</code> option with another one. If modal is opened via JavaScript methods, or by clicking
                on another element that is not a modal triggering element, the <code>relatedTarget</code> is <em>null</em>.</p>
            </section>
            <section id="modalUsage">
              <h4>Usage</h4>
              <h5 id="modalDataAPI">Via DATA API</h5>
              <p>You can initialize <b>Modal</b> without writing any code as long as you have a modal and a trigger with <code>data-target</code> or a link with <code>href</code> referencing that modal. The component
                will initialize for all elements with <code>data-toggle="modal"</code> found in the DOM.</p>

<pre><code class="language-markup">&lt;!-- provide a trigger button --&gt;
&lt;button id="myModalTrigger" type="button" data-toggle="modal" data-target="#myModal"&gt;Launch modal&lt;/button&gt;

&lt;!-- Alternatively provide a link --&gt;
&lt;a id="myModalTrigger" data-toggle="modal" href="#myModal"&gt;Launch modal&lt;/a&gt;

&lt;!-- also the modal itself --&gt;
&lt;div id="myModal" class="modal fade" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"&gt;
  &lt;div class="modal-dialog"&gt;
    &lt;div class="modal-content"&gt;
      &lt;div class="modal-header">
        &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close">&lt;span aria-hidden="true"&gt;&times;&lt;/span&gt;&lt;/button&gt;
        &lt;h4 class="modal-title" id="myModalLabel"&gt;Modal title&lt;/h4&gt;
      &lt;/div&gt;
      &lt;div class="modal-body"&gt;
        Some content
      &lt;/div>
      &lt;div class="modal-footer"&gt;
        &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;Close&lt;/button&gt;
        &lt;button type="button" class="btn btn-primary"&gt;Save changes&lt;/button&gt;
      &lt;/div>
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

              <p>The DATA API is suited for static content dialogs.</p>

              <h5>Via JavaScript</h5>
              <p>When you write your code, first make sure a modal template is present in the DOM. Generally you can initialize <b>Modal</b> for any instance of <code>&lt;div class="modal"&gt;</code> and immediately get access to methods. Alternativelly you can initialize on a triggering element, similar to how the DATA API works, in this case the <code>data-toggle="modal"</code> is not required, but you need to specify a modal reference via a specific attribute, like so <code>&lt;button data-target="#modalId"&gt;</code> or <code>&lt;a href="#modalId"&gt;</code>.</p>
              <p>The JavaScript way is the <b>only</b> way to deal with dynamically added modals. Let's create a very basic modal template for the record.</p>

<pre><code class="language-markup">&lt;!-- blank modal template --&gt;
&lt;div id="modalID" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true"&gt;
  &lt;div class="modal-dialog"&gt;
    &lt;div class="modal-content"&gt;
      &lt;!-- the .setContent() method will update this element's HTML --&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

              <p>If you are looking for the functionality that grants you full control over your modal without the need of a triggering element, you can initialize that modal and get access to public methods right away:</p>

<pre><code class="language-javascript">// get the modal by ID
var myModal = document.getElementById('modalID');

// initialize on a &lt;div class="modal"&gt; with all options
// Note: options object is optional
var myModalInstance = new Modal(myModal,
{ // options object
  content: '&lt;div class="modal-body"&gt;Some content to be set on init&lt;/div&gt;', // sets modal content
  backdrop: 'static', // we don't want to dismiss Modal when Modal or backdrop is the click event target
  keyboard: false // we don't want to dismiss Modal on pressing Esc key
});

// OR initialize and show the modal right away
var myModalInstance = new Modal(myModal, options);
myModalInstance.show();
// now you know why we don't need a show option
</code></pre>

              <p>In other cases you can designate one or multiple triggering elements to open your modal, they will be the target of the constructor initialization and allow you to use same modal as a template to handle contents pushed by the triggering elements.</p>

<pre><code class="language-markup">&lt;!-- &lt;button&gt; referencing the modal --&gt;
&lt;button type="button" id="buttonID" class="btn btn-primary" data-target="#modalID"&gt;My Button&lt;/button&gt;

&lt;!-- &lt;a&gt; referencing the modal --&gt;
&lt;a id="anchorID" class="btn btn-primary" href="#modalID"&gt;My Link&lt;/a&gt;
</code></pre>

              <p>Now let's initialize one of them right away:</p>

<pre><code class="language-javascript">// get a certain button trigger
var myButton = document.getElementById('buttonID');

// initiate Modal on a triggering element
var myModalInstance = new Modal(myButton,
{ // options object
  content: '&lt;div class="modal-body"&gt;Some content to be set on init&lt;/div&gt;', // sets modal content
  keyboard: false // we don't want to dismiss Modal on pressing Esc key
});
</code></pre>

              <p>Now we have an initialization reference in <code>myModalInstance</code>, regardless of which element is the target of our constructor, we can start applying the component's public methods.</p>

<pre><code class="language-javascript">// show the modal at any time
myModalInstance.show();

// hide the modal
myModalInstance.hide();

// toggle the modal (show/hide)
myModalInstance.toggle();

// change the modal content
myModalInstance.setContent('&lt;div class="modal-body"&gt;Some different content&lt;/div&gt;');

// if the above method is used while modal was shown, you can then ask for a layout update
myModalInstance.update();
</code></pre>

              <p>After initialization via DATA API or JavaScript, we also have access to the component's original events.</p>

<pre><code class="language-javascript">// GET THE EVENT TARGET, THE MODAL
// when we are certain which modal ID to work with
var myModal = document.getElementById('modalID');

// also button trigger related (especially when modals are targeted by multiple triggering elements)
// a triggering element is a link
var myModal = document.getElementById(myModalTriggerButton.getAttribute('href').replace('#',''));
// OR triggering element is not a link
var myModal = document.getElementById(myModalTriggerButton.getAttribute('data-target').replace('#',''));

// ATTACH HANDLERS
// show.bs.modal event
myModal.addEventListener('show.bs.modal', function(event){
  // do something when this event triggers
  // event.target is the modal referenced in myModal
  // event.relatedTarget is the button referenced with myModalTriggerButton
}, false);

// shown.bs.modal event
myModal.addEventListener('shown.bs.modal', function(event){
  // do something when this event triggers
  // event.target is the modal referenced in myModal
  // event.relatedTarget is the button referenced with myModalTriggerButton
}, false);

// hide.bs.modal event
myModal.addEventListener('hide.bs.modal', function(event){
  // do something when this event triggers
  // event.target is the modal referenced in myModal
}, false);

// hidden.bs.modal event
myModal.addEventListener('hidden.bs.modal', function(event){
  // do something when this event triggers
  // event.target is the modal referenced in myModal
}, false);
</code></pre>

              <p>Additionally the component will store in the modal OR its triggering elements some references, for the internal execution, hopefully would help you as well. For instance, when a modal is referenced by one or more triggering elements, it will know which one was clicked last time to execute the <code>.show()</code> instance method.</p>

<pre><code class="language-javascript">// for modals with multiple triggering elements, the value changes every time the triggering element was clicked
var lastModalTrigger = myModal.modalTrigger;

// for modals targeted directly by the component with no triggering element
// you can access the initialization object from the modal itself
var myModalInit = myModal.Modal;
</code></pre>

              <p>Also each triggering element holds the initialization of the <b>Modal</b> component:</p>

<pre><code class="language-javascript">// when a modal was initialized via DATA API
// OR a triggering element is the target of the Modal constructor
var myModalInstance === document.getElementById('myModalTrigger').Modal;
</code></pre>

              <p>These references are used internally to hide currently visible modals when showing another one. When the component is used via JavaScript only without a triggering element, you need to manually hide (via <code>.hide()</code> instance method) any visible modal before showing another modal (via the <code>.show()</code> instance method).</p>
            </section>

            <section id="modalExamples">
              <h4>Examples</h4>

              <h5>Using the DATA API</h5>
              <p>The first example is a modal with static content initialized via DATA API, exactly as described in the above <a href="#modalDataAPI">Use via DATA API</a> section, and showcasing the
                ability to show another modal from a modal currently visible.</p>
              <p><button type="button" class="btn btn-warning btn-lg" data-toggle="modal" data-target="#myModal"><i class="glyphicon glyphicon-heart"></i> Launch simple modal</button></p>
              <div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header"> <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
                      <h4 class="modal-title" id="myModalLabel">Modal title</h4>
                    </div>
                    <div class="modal-body">
                      <h4>Text in a modal</h4>
                      <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>
                      <h4>Popover in a modal</h4>
                      <p>This <a href="#" style="margin:-5px 0 0 0" role="button" data-toggle="popover" class="btn btn-default popover-test" data-content="And here's some amazing content. It's very engaging. right?" data-title="A Title">button</a> should trigger a popover on click.</p>
                      <h4>Tooltips in a modal</h4>
                      <p><a href="#" class="tooltip-test" data-toggle="tooltip" title="Tooltip">This link</a> and <a href="#" data-toggle="tooltip" class="tooltip-test" title="Tooltip">that link</a> should have tooltips on hover.</p>
                      <h4>Open modal from modal</h4>
                      <p>Click <a data-toggle="modal" href="#anotherModal">here</a> to open another modal.</p>
                      <hr>
                      <h4>Overflowing text to show scroll behavior</h4>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-success" data-toggle="modal" data-target="#anotherModal">Next</button>
                      <button type="button" class="btn btn-default" data-dismiss="modal"><i class="glyphicon glyphicon-remove"></i> Close</button>
                    </div>
                  </div>
                </div>
              </div>
              <div id="anotherModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="anotherModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header"> <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
                      <h4 class="modal-title" id="anotherModalLabel">Another Modal Title</h4>
                    </div>
                    <div class="modal-body">
                      <h4>This modal was opened from another modal</h4>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                    </div>
                    <div class="modal-footer">
                      <button data-toggle="modal" data-target="#myModal" type="button" class="btn btn-primary">Back</button>
                      <button type="button" class="btn btn-default" data-dismiss="modal"><i class="glyphicon glyphicon-remove"></i> Close</button>
                    </div>
                  </div>
                </div>
              </div>

              <h5>Via JavaScript</h5>
              <p>The following examples are focused on everything the <b>Modal</b> component offers for JavaScript initialization and usage. Given a modal template and some buttons to open the modal on click,
                let's initialize it first:</p>

<pre><code class="language-javascript">// we grab a modal by ID
var myModal = document.getElementById('myModal');

// we grab some button by ID, we will use it later
var btnModal = document.getElementById('openModalViaJS');
// this button IS NOT a triggering element, as it has no reference to the above modal

// set a custom content
var firstModalContent = '&lt;div class="modal-header"&gt;'
    +'&lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;'
      +'&lt;span aria-hidden="true"&gt;×&lt;/span&gt;'
    +'&lt;/button&gt;'
    +'&lt;h4 class="modal-title" id="myModalJSLabel"&gt;Modal title&lt;/h4&gt;'
  +'&lt;/div&gt;'
  +'&lt;div class="modal-body"&gt;'
    +'&lt;p&gt;This is where you fill up content you know, etc.&lt;/p&gt;'
  +'&lt;/div&gt;'
  +'&lt;div class="modal-footer"&gt;'
    +'&lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;Close&lt;/button&gt;'
  +'&lt;/div&gt;';

// initialize Modal for this triggering element
var modalInitJS = new Modal(myModal, {
  content: firstModalContent,
  backdrop: 'static'
});

// OR initialize with no options provided
// the options object is optional
var modalInitJS = new Modal(myModal);

// when we click btnModal, open the modal
btnModal.addEventListener('click', function(e){
  modalInitJS.show();
}, false)

// BONUS
// since there is no triggering element, you might need
// access to the initialization object from another application
var findModalInitJS = myModal.Modal;
</code></pre>

              <p>Here is what the above code does:</p>
              <p><button id="openModalViaJS" type="button" class="btn btn-default btn-lg">Open Modal</button></p>

              <p>Next we will initialize another triggering button, and attach a handler to it to change content of the modal when clicked.</p>

<pre><code class="language-javascript">// the triggering element
var btnModal2 = document.getElementById('openModalViaJS2');

// set some custom content or get if from external sources
var externalModalContent = {
  title: 'A modal title',
  content: 'Modal content to fill the modal-body.',
};

// set a custom modal-content template
var secondModalContent =
  '&lt;div class="modal-header"&gt;'
    +'&lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;'
      +'&lt;span aria-hidden="true"&gt;×&lt;/span&gt;'
    +'&lt;/button&gt;'
    +'&lt;h4 class="modal-title" id="gridModalLabel"&gt;' + externalModalContent.title + '&lt;/h4&gt;'
  +'&lt;/div&gt;'
  +'&lt;div class="modal-body"&gt;'
    +'&lt;p&gt;' + externalModalContent.content + '&lt;/p&gt;'
  +'&lt;/div&gt;'
  +'&lt;div class="modal-footer"&gt;'
    +'&lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;Close&lt;/button&gt;'
  +'&lt;/div&gt;';

// initialize Modal for this triggering element
var modalInitJS2 = new Modal(btnModal2, { backdrop: 'static' });

// because we initialized the component for this button
// this becomes the triggering element to hold the initialization object
var modalInitJSInit2 = btnModal2.Modal;

// now when we click this modal triggering element, we change the modal content
btnModal2.addEventListener('click', function() {
  modalInitJS2.setContent(secondModalContent);
}, false);
</code></pre>

              <p>By changing the <code>innerHTML</code> of the <code>modal-header</code>, <code>modal-body</code> or <code>modal-footer</code> with variables, you can achieve exactly the same as the
                <a href="http://getbootstrap.com/javascript/#modals-related-target" rel="noreferrer" target="_blank">other examples</a> from the demo of the original plugin. So we use same modal, but with different content:</p>
              <p><a id="openModalViaJS2" class="btn btn-default btn-lg">Open Modal</a></p>

              <p>Now if you go back to the previous triggering button and click it, you will notice that the modal is still like it was set by the second triggering button. Let's reset the modal content:</p>

<pre><code class="language-javascript">// we grab the button by ID
var btnModalNotTrigger = document.getElementById('modalNotTriggerJS');

// simply attach a click handler to it
btnModalNotTrigger.addEventListener('click', function() {
  modalInitJS.setContent(firstModalContent);  // revert modal content back to previous
  modalInitJS.show(); // also show the modal
}, false);
</code></pre>
              <p>Back to the previous modal content:</p>
              <p><a id="modalNotTriggerJS" class="btn btn-default btn-lg" href="#">Reset</a></p>

              <div id="myModalJS" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalJSLabel" aria-hidden="true">
                <div class="modal-dialog">
                  <div class="modal-content">

                  </div>
                </div>
              </div>

              <p>Another example is using the <code>.update()</code> method. Let's say we have a modal initialized via DATA API, you might think we cannot access this instance's methods. Remember the trigger button
                stores the initialization?</p>

<pre><code class="language-javascript">var modalUpdate = document.getElementById('modalUpdate'), // the trigger
  anotherStaticModal = document.getElementById('anotherStaticModal'), // the modal
  currentStaticModalBody = anotherStaticModal.querySelector('.modal-body'), // the body of the current modal
  currentStaticModalBodyContent = currentStaticModalBody.innerHTML, // we cache the content of the body
  modalUpdateInit = modalUpdate.Modal, // the initialization
  changeModal1 = document.getElementById('changeModal1'), // the change buttons
  changeModal2 = document.getElementById('changeModal2');

changeModal1.addEventListener('click', function(){
  currentStaticModalBody.innerHTML = currentStaticModalBodyContent;
  modalUpdateInit.update();
}, false);

changeModal2.addEventListener('click', function(){
  currentStaticModalBody.innerHTML  = '&lt;h4&gt;This modal changed via JavaScript&lt;/h4&gt;';
  currentStaticModalBody.innerHTML += '&lt;p&gt;Something you would want to be displayed in the body.&lt;/p&gt;';
  modalUpdateInit.update();
}, false);
</code></pre>

              <p>A quick demo to showcase the above script:</p>
              <p><a id="modalUpdate" class="btn btn-default btn-lg" data-toggle="modal" href="#anotherStaticModal">Show modal</a></p>

              <div id="anotherStaticModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="anotherStaticModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header"> <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
                      <h4 class="modal-title" id="anotherStaticModalLabel">Some Modal Title</h4>
                    </div>
                    <div class="modal-body">
                      <h4>This modal is initialized via DATA API</h4>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                      <p class="text-info lead">Scroll down.</p>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                      <p class="text-info lead">Scroll some more.</p>
                      <p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                      <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>
                      <p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p>
                    </div>
                    <div class="modal-footer">
                      <button id="changeModal1" type="button" class="btn btn-primary hidden">Set content 1</button>
                      <button id="changeModal2" type="button" class="btn btn-primary">Set content 2</button>
                      <button type="button" class="btn btn-default" data-dismiss="modal"><i class="glyphicon glyphicon-remove"></i> Close</button>
                    </div>
                  </div>
                </div>
              </div>
            </section>
          </section>

          <section id="componentDropdown">
            <h3>Dropdown</h3>
            <p>The <b>Dropdown</b> component works like the original jQuery plugin and offers an additional option and an ability to handle click event in a way that you can create nested dropdowns and other cool stuff with ease.</p>
            <p>Starting with version 2.0.20 the component supports some more robust accessibility features:</p>
            <ul>
              <li><kbd>Up</kbd> and <kbd>Down</kbd> arrow keys will users to select menu items, and also when pressed, the component will prevent default scroll behavior;</li>
              <li><kbd>Esc</kbd> key will now close the dropdown, a feature previously supported, but reworked it's <code>keyHandler</code> to support the above new features, so it will close the last open nested dropdown element;</li>
              <li><kbd>Enter</kbd> key will work as if click event triggered, the new event handler expectes the default browser behavior, let's hope it stays that way;</li>
              <li>opening/closing the dropdown now it will focus the triggering button (on close) or the first focusable element from inside the dropdown menu (on open).</li>
            </ul>
            <section id="dropdownOptions">
              <h4>Options</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                      <tr>
                        <th>Name</th>
                        <th>type</th>
                        <th>default</th>
                        <th>description</th>
                      </tr>
                  </thead>
                  <tbody>
                      <tr>
                        <td><code>persist</code></td>
                        <td><em>boolean</em></td>
                        <td>false</td>
                        <td>Option to keep the dropdown-menu open when <code>click</code> event targets a child element, useful for forms or interactive content. Use <code>data-persist="true"</code> attribute to enable this functionality via DATA-API.</td>
                      </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="dropdownMethods">
              <h4>Methods</h4>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.toggle()</h4>
                  <p class="list-group-item-text">For a given initialization the method shows the dropdown-menu if hidden or hides it otherwise.</p>
                </div>
              </div>
            </section>

            <section id="dropdownEvents">
              <h4>Events</h4>
              <p>Just like the original jQuery plugin, the <b>Dropdown</b> component covers this part as well:</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>show.bs.dropdown</code></td>
                      <td>This event fires immediately when the show instance method is called.</td>
                    </tr>
                    <tr>
                      <td><code>shown.bs.dropdown</code></td>
                      <td>This event is fired when the dropdown has been made visible to the user.</td>
                    </tr>
                    <tr>
                      <td><code>hide.bs.dropdown</code></td>
                      <td>This event is fired immediately when the hide instance method has been called.</td>
                    </tr>
                    <tr>
                      <td><code>hidden.bs.dropdown</code></td>
                      <td>This event is fired when the dropdown has finished being hidden from the user.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <p>The target of all component events is the parent <code>&lt;div class="dropdown"&gt;</code>, while the <code>event.relatedTarget</code> is the triggering element with the specific
                <code>data-toggle="dropdown"</code> attribute. If you dismiss the dropdown via JavaScript, the <kbd>Esc</kbd> key or by clicking outside the triggering button, the <code>event.relatedTarget</code>
                is <em>null</em>.</p>
            </section>

            <section id="dropdownUsage">
              <h4>Usage</h4>
              <h5>Via DATA API</h5>
              <p>Notice we use same markup as the original example, the triggering element with the <code>data-toggle="dropdown"</code> attribute will initialize the <b>Dropdown</b> component.</p>

<pre><code class="language-markup">&lt;!-- basic dropdown template --&gt;
&lt;div class="dropdown"&gt;
  &lt;button id="myDropdown" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;
    Dropdown trigger
    &lt;span class="caret">&lt;/span&gt;
  &lt;/button&gt;
  &lt;ul class="dropdown-menu" aria-labelledby="myDropdown"&gt;
    ...
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

              <h5>Via JavaScript</h5>
              <p>When you want full control or you need a way to handle dynamically generated dropdown-menus, you can do it via JavaScript. Considering the above HTML was inserted into the DOM, let's initialize it real quick:</p>

<pre><code class="language-javascript">// get some element that has the data-toggle="dropdown"
var myDropdown = document.getElementById('myDropdown');

// initialize component with it's 'persist' option
var myDropdownInit = new Dropdown( myDropdown, true );

// OR initialize component with no option
// the option is optional
var myDropdownInit = new Dropdown( myDropdown );
</code></pre>
              <p>All right, now we have an initialization reference, we can get to work with the component's method:</p>
<pre><code class="language-javascript">// assuming the above, we can
myDropdownInit.toggle();

// or we can simply toggle the dropdown on initialization
var newDropdownInitialization = new Dropdown(myDropdown).toggle();
</code></pre>

              <p>Also assuming the above HTML was used for your dropdown-menu, we can also attach the original events to the parent of the triggering element, which is the <code>&lt;div class="dropdown"&gt;</code> element:</p>

<pre><code class="language-javascript">// show.bs.dropdown
myDropdown.parentNode.addEventListener('show.bs.dropdown', function(event){
  // do something when the event fires
  // event.target is the PARENT of the triggering element
  // event.relatedTarget is the triggering element
}, false);

// shown.bs.dropdown
myDropdown.parentNode.addEventListener('shown.bs.dropdown', function(event){
  // do something when the event fires
  // event.target is the PARENT of the triggering element
  // event.relatedTarget is the triggering element
}, false);

// hide.bs.dropdown
myDropdown.parentNode.addEventListener('hide.bs.dropdown', function(event){
  // do something when the event fires
  // event.target is the PARENT of the triggering element
}, false);

// hidden.bs.dropdown
myDropdown.parentNode.addEventListener('hide.bs.dropdown', function(event){
  // do something when the event fires
  // event.target is the PARENT of the triggering element
}, false);
</code></pre>
              <p>When your dropdown-menus have a different structure and the <code>myDropdown.parentNode</code> is NOT the <code>&lt;div class="dropdown"&gt;</code> element, you might consider a
                <code>getClosest()</code> function to find it so you can then attach the original events to it.</p>

              <p>Now, the <b>Dropdown</b> component also stores the initialization object in the targeted elements, just as for the modal triggering buttons:</p>

<pre><code class="language-javascript">// get some element we know it was initialized
var myDropdown = document.getElementById('myDropdown');

// reference the initialization
var myDropdownInit = myDropdown.Dropdown;

// use the public method
myDropdownInit.toggle();
</code></pre>
              <p>Also you can do a simple check for the existence of <code>'Dropdown' in myDropdown</code> element to make sure you don't go the wrong way.</p>

            </section>

            <section id="dropdownExamples">
              <h4>Examples</h4>
              <p>Right out of the box, the above dropdown template is initialized via DATA-API right away.</p>
              <div class="btn-group" style="margin-bottom:10px">
                <div class="dropdown">
                  <button class="btn btn-primary" id="myDropdown" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Dropdown trigger <span class="caret"></span></button>
                  <ul class="dropdown-menu" aria-labelledby="myDropdown">
                    <li role="presentation"><a role="menuitem" href="#">Action</a></li>
                    <li role="presentation"><a role="menuitem" href="#">Another action</a></li>
                    <li role="presentation"><a role="menuitem" href="#">Something else here</a></li>
                  </ul>
                </div>
              </div>
              <p>Ok now let's insert a new dropdown-menu and initialize right after via JavaScript.</p>
<pre><code class="language-javascript">// let's do it via a click handler to the following element
var makeMeDropdown = document.getElementById('makeMeDropdown');

// let's say we have a dropdown template as the above
// you may also reference one that you created yourself
var myDropdownTemplate = '&lt;div class="dropdown"&gt;a valid template&lt;/div&gt;';

makeMeDropdown.addEventListener('click', function(e){
  e.preventDefault();

  // don't do this again
  if ( !/\bdisabled/.test(makeMeDropdown.className) ){

    // invalidate the makeMeDropdown
    this.setAttribute('disabled',true);
    this.className = 'btn btn-default disabled';
    this.innerHTML = 'All done';

    // we inject the dropdown
    this.parentNode.innerHTML += myDropdownTemplate;
    // or use appendChild when myDropdownTemplate is an Element instance
    // this.parentNode.appendChild( myDropdownTemplate );

    // get a reference to the new dropdown
    var formDropdown = document.getElementById('formDropdown');

    // initiate with option
    var DropdownInit = new Dropdown(formDropdown, true);

    // also attach Dropdown original events
    formDropdown.parentNode.addEventListener('show.bs.dropdown', function(e){
      console.log('Do something when the event fires');
    }, false);
    formDropdown.parentNode.addEventListener('shown.bs.dropdown', function(e){
      console.log('Do something when the event fires');
    }, false);
    formDropdown.parentNode.addEventListener('hide.bs.dropdown', function(e){
      console.log('Do something when the event fires');
    }, false);
    formDropdown.parentNode.addEventListener('hidden.bs.dropdown', function(e){
      console.log('Do something when the event fires');
    }, false);
  }
}, false);
</code></pre>

              <p>That's all there is to do with <b>Dropdown</b> initialization, let's check a quick demo.</p>
              <div class="btn-group" style="margin-bottom:10px">
                <button id="makeMeDropdown" class="btn btn-success">Make me a Dropdown</button>
              </div>
              <p>A quick last example is with nested dropdown-menus, as the component will look for the child elements and will prevent itself from closing if the click target is a child item with <code>data-toggle</code> attribute.</p>
              <ul class="nav nav-pills">
                <li class="dropdown">
                  <a id="drop1" href="#" class="dropdown-toggle" data-toggle="dropdown" data-trigger="mouseover" aria-haspopup="true" role="button" aria-expanded="false">Pill <span class="caret"></span></a>
                  <ul class="dropdown-menu" role="menu" aria-labelledby="drop1">
                    <li role="presentation"><a role="menuitem" href="#">Action</a></li>
                    <li role="presentation"><a role="menuitem" href="#">Another action</a></li>
                    <li role="presentation" class="dropdown">
                      <a role="menuitem" href="#" data-toggle="dropdown" aria-expanded="false">This is nesting <span class="caret"></span></a>
                      <ul class="dropdown-menu right" role="menu" aria-labelledby="drop2">
                        <li role="presentation"><a role="menuitem" href="#">Action</a></li>
                        <li role="presentation"><a role="menuitem" href="#">Another action</a></li>
                        <li role="presentation"><a role="menuitem" href="#">Something else here</a></li>
                        <li role="presentation" class="divider"></li>
                        <li role="presentation" class="dropdown">
                          <a role="menuitem" href="#" data-toggle="dropdown" aria-expanded="false">Sub-menu <span class="caret"></span></a>
                          <ul class="dropdown-menu right" role="menu" aria-labelledby="drop3">
                            <li role="presentation"><a role="menuitem" href="#">Level 1</a></li>
                            <li role="presentation"><a role="menuitem" href="#">Nested Menu</a></li>
                            <li role="presentation" class="dropdown">
                              <a role="menuitem" href="#" data-toggle="dropdown" aria-expanded="false">Other stuff <span class="caret"></span></a>
                              <ul class="dropdown-menu right" role="menu" aria-labelledby="drop4">
                                <li role="presentation"><a role="menuitem" href="#">Level 2</a></li>
                                <li role="presentation"><a role="menuitem" href="#">Nested Menu</a></li>
                                <li role="presentation" class="dropdown">
                                  <a role="menuitem" href="#" data-toggle="dropdown" aria-expanded="false">Even more stuff <span class="caret"></span></a>
                                  <ul class="dropdown-menu right" role="menu" aria-labelledby="drop5">
                                    <li role="presentation"><a role="menuitem" href="#">Level 3</a></li>
                                    <li role="presentation"><a role="menuitem" href="#">Nested Menu</a></li>
                                  </ul>
                                </li>
                              </ul>
                            </li>
                          </ul>
                        </li>
                      </ul>
                    </li>
                    <li role="presentation" class="divider"></li>
                    <li role="presentation"><a role="menuitem" href="http://google.cn" rel="noreferrer" target="_blank">External link</a></li>
                  </ul>
                </li>
                <li class="dropdown pull-right">
                  <a id="drop2" href="#" class="dropdown-toggle" data-toggle="dropdown" data-trigger="mouseover" aria-haspopup="true" role="button" aria-expanded="false">Nested <span class="caret"></span></a>
                  <ul class="dropdown-menu pull-right" role="menu" aria-labelledby="drop2">
                    <li role="presentation"><a role="menuitem" href="#">Action</a></li>
                    <li role="presentation"><a role="menuitem" href="#">Another action</a></li>
                    <li role="presentation"><a role="menuitem" href="#">Something else here</a></li>
                    <li role="presentation" class="divider"></li>
                    <li role="presentation" class="dropdown">
                      <a role="menuitem" href="#" data-toggle="dropdown" aria-expanded="false">Sub-menu <span class="caret"></span></a>
                      <ul class="dropdown-menu left" role="menu" aria-labelledby="drop3">
                        <li role="presentation"><a role="menuitem" href="#">Level 1</a></li>
                        <li role="presentation"><a role="menuitem" href="#">Nested Menu</a></li>
                        <li role="presentation" class="dropdown">
                          <a role="menuitem" href="#" data-toggle="dropdown" aria-expanded="false">Other stuff <span class="caret"></span></a>
                          <ul class="dropdown-menu left" role="menu" aria-labelledby="drop4">
                            <li role="presentation"><a role="menuitem" href="#">Level 2</a></li>
                            <li role="presentation"><a role="menuitem" href="#">Nested Menu</a></li>
                            <li role="presentation" class="dropdown">
                              <a role="menuitem" href="#" data-toggle="dropdown" aria-expanded="false">Even more stuff <span class="caret"></span></a>
                              <ul class="dropdown-menu left" role="menu" aria-labelledby="drop4">
                                <li role="presentation"><a role="menuitem" href="#">Level 3</a></li>
                                <li role="presentation"><a role="menuitem" href="#">Nested Menu</a></li>
                              </ul>
                            </li>
                          </ul>
                        </li>
                      </ul>
                    </li>
                  </ul>
                </li>
              </ul>
            </section>
          </section>

          <section id="componentScrollspy">
            <h3>Scrollspy</h3>
            <p>The <b>ScrollSpy</b> component inherits some of the <a rel="noreferrer" href="http://getbootstrap.com/javascript/#scrollspy-usage" target="_blank">layout and other requirements</a> from the original jQuery plugin in some cases, while in other cases a special markup is required. The component offers public methods, the specific original event, and can be used with JavaScript as well as via DATA API.</p>
            <p>The component will initialize for each element with <code>data-spy="scroll"</code> attribute, but will not work if the above requirements are not met or the anchors don't reference the containers accordingly.</p>

            <section id="scrollspyOptions">
              <h4>Options</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>target</code></td>
                      <td><em>string</em><br>or a<br>reference</td>
                      <td>element <code>'#ID'</code><br>
                        or other reference
                      </td>
                      <td>The option to target the container with <code>data-spy="scroll"</code> attribute.<br>EG: <code>data-target="#myMenuID"</code></td>
                    </tr>
                    <tr>
                      <td><code>offset</code></td>
                      <td><em>number</em></td>
                      <td>10</td>
                      <td>Option to set a number of pixels as offset from top when calculating position of scroll. Can be set via <code>data-offset="NUMBER"</code> attribute or simply <code>offset</code> via JavaScript invokation.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="scrollspyMethods">
              <h4>Methods</h4>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.refresh()</h4>
                  <p class="list-group-item-text">When DOM layout changes occured without triggering a resize of your element, you will have this option to immediately update the status of your menu items.</p>
                </div>
              </div>
            </section>

            <section id="scrollspyEvents">
              <h4>Events</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>activate.bs.scrollspy</code></td>
                      <td>This event fires whenever a new item was activated by the component.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <p>The event target is the element we initialized the component via JavaScript or the <code>data-spy="scroll"</code> attribute. The newly activated menu item's link is the <code>event.relatedTarget</code>
                for the event.</p>
            </section>

            <section id="scrollspyUsage">
              <h4>Usage</h4>
              <h5>Via DATA API</h5>
              <p>To initialize <b>ScrollSpy</b>, remember the <a rel="noreferrer" href="http://getbootstrap.com/javascript/#scrollspy-usage" target="_blank">requirements</a> from the original jQuery plugin. The component can initialize any element with <code>overflow: auto|scroll</code> and a fixed height, or the <code>&lt;body&gt;</code> or an immediate child element. For the second case we need some special HTML markup in order to initialize and the appropriate styling for its containers.</p>

              <p>An <b>overflowing element</b> that has set <code>overflow: auto|scroll</code> style rule:</p>
              <ul>
                <li>The headings have the required IDs;</li>
                <li>Only the element requires some additional CSS;</li>
                <li>No special markup required.</li>
              </ul>
<pre><code class="language-markup">&lt;!-- the element we initialize ScrollSpy on --&gt;
&lt;div data-spy="scroll" data-target="#navbar-example" class="scrollspy-example"&gt;

  &lt;!-- we look for the position of heading --&gt;
  &lt;h4 id="one"&gt;Title ONE&lt;/h4&gt;
  &lt;p&gt;Valid TEXT goes here&lt;/p&gt;

  &lt;h4 id="twoOne"&gt;Title TWO&lt;/h4&gt;
  &lt;p&gt;Valid TEXT goes here&lt;/p&gt;

  &lt;h4 id="three"&gt;Title THREE&lt;/h4&gt;
  &lt;p&gt;Valid TEXT goes here&lt;/p&gt;

&lt;/div&gt;

&lt;!-- we need a target, any of the below elements with an ID will do --&gt;
&lt;nav id="nav-example"&gt; &lt;!-- we can also target it's parent as well --&gt;
  &lt;ul id="navbar-example" class="nav nav-stacked"&gt; &lt;!-- this is our element's target --&gt;
    &lt;li&gt;&lt;a href="#one">One&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#two">Two&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#three">Three&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
</code></pre>
              <p>In this case we only need to set a fixed height for the element and change its overflow:</p>

<pre><code class="language-css">/* the element we initialize ScrollSpy on */
.scrollspy-example {
  position: relative; /* required */
  height: 150px; overflow: auto; /* required: height must be px based, and overflow: scroll/auto */
}
</code></pre>

              <p>A <b>non-overflowing element</b> that wraps most of the content of your page:</p>
              <ul>
                <li>Special markup IS required;</li>
                <li>The element's child containers have the required IDs;</li>
                <li>Child containers require some additional styling.</li>
              </ul>

<pre><code class="language-markup">&lt;!-- the element we initialize ScrollSpy on --&gt;
&lt;div data-spy="scroll" data-target="#navbar-example" class="scrollspy-example"&gt;

  &lt;section id="one"&gt; &lt;!-- this is a ScrollSpy container --&gt;
    Valid HTML goes here
  &lt;/section&gt;

  &lt;section id="two"&gt;
    &lt;section id="twoone"&gt;
      One level nested containers also apply
    &lt;/section&gt;

    &lt;section id="twotwo"&gt;
      This is your second nested container
    &lt;/section&gt;
  &lt;/section&gt;

&lt;/div&gt;

&lt;!-- we need a target, any of the below elements with an ID will do --&gt;
&lt;nav id="nav-example"&gt; &lt;!-- we can also target it's parent as well --&gt;
  &lt;ul id="navbar-example" class="nav nav-stacked"&gt; &lt;!-- this is our element's target --&gt;
    &lt;li&gt;&lt;a href="#one">One&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;
      &lt;a href="#two"&gt;Two&lt;/a&gt;
      &lt;ul class="nav nav-stacked"&gt;
        &lt;li&gt;&lt;a href="#twoone">Two One&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#twotwo">Two Two&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
</code></pre>

              <p>Some additional styling can be used to force <b>ScrollSpy</b> containers to have the exact height as the sum of all child elements and / or child containers.</p>

<pre><code class="language-css">/* element child containers */
section {
  position: relative; /* required */
  display: inline-block; width: 100%; /* not required, but recommended */
}
</code></pre>

              <p>For instances of <b>ScrollSpy</b> when the designated element is not overflowing and the scroll target is the window (like the example with the side navigation of this page), the container nesting is, as you probably noticed, unlimited.</p>

              <h5>Via JavaScript</h5>
              <p>For full control and access to the component's features, coding the JavaScript part is a breeze. Assuming the above markup have been injected into the DOM and the CSS is set, let's initialize, apply the public method and attach handlers to the original event.</p>

<pre><code class="language-javascript">// the element we initialize ScrollSpy on
var myScrollSpyElement = document.getElementsByClassName('scrollspy-example')[0];

// let's give the initialization a JavaScript reference for the "target" option
var myScrollSpyTarget = document.getElementById('myScrollSpyTarget');

// initialize the ScrollSpy for this element
var myScrollSpyInit = new ScrollSpy(myScrollSpyElement, {
  // set options
  target : myScrollSpyTarget,
  // alternativelly, provide a valid selector string
  // EG: ".my-unique-class-name" or "#my-unique-ID"

  // in some cases the offset option would help calculate
  // the correct boundaries of target containers
  offset: 15
})
</code></pre>

              <p>If the initialization validates (the <code>target</code> option is valid and the component links the element with it's target), we have access to the method and the original event.</p>

<pre><code class="language-javascript">// apply the public method after DOM changed
// a new element container and it's corresponding menu item have been injected into the DOM
myScrollSpyInit.refresh();

// attach an event handler
myScrollSpyElement.addEventListener('activate.bs.scrollspy', function(event){
  // do some cool stuff
  // event.target is myScrollSpyElement
  // event.relatedTarget is the menu item link that triggered the event
}, false);
</code></pre>

              <p>To get access to an initialization object regardless of how it was initialized, here's how to do it:</p>

<pre><code class="language-javascript">// grab an element we know it was initialized via DATA API
var myScrollSpy = document.getElementById('myScrollSpy');

// check if the element is already initialized
var myScrollSpyIsInitialized = 'ScrollSpy' in myScrollSpy;

// if the above is true
var myScrollSpyInit = myScrollSpy.ScrollSpy;

// play with the public method
myScrollSpyInit.refresh();
</code></pre>

              <p>Now this makes alot more sense, especially when you expect full control and also want to make sure you don't attach event handlers multiple times for your elements.</p>
            </section>

            <section id="scrollspyExamples">
              <h4>Examples</h4>
              <p>According to the above <a href="#scrollspyUsage">Usage Guide</a> let's initialize an overflowing element via DATA API:</p>

              <nav class="navbar navbar-inverse navbar-static">
                <div class="navbar-header">
                  <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target="#scrollSpy-nav">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                  </button>
                  <a class="navbar-brand" href="#">Project Name</a>
                </div>
                <div id="scrollSpy-nav" class="collapse navbar-collapse">
                  <ul id="navbar-example" class="nav navbar-nav">
                    <li class=""><a href="#first">Tumblr farm</a></li>
                    <li class=""><a href="#second">Carles aesthetic</a></li>
                    <li class="dropdown">
                      <a class="dropdown-toggle" data-toggle="dropdown" aria-expanded="false">More Items <span class="caret"></span></a>
                      <ul class="dropdown-menu" role="menu">
                        <li class=""><a href="#one">one</a></li>
                        <li class=""><a href="#two">two</a></li>
                        <li class="divider"></li>
                        <li class=""><a href="#three">three</a></li>
                      </ul>
                    </li>
                  </ul>
                </div>
              </nav>

              <div data-spy="scroll" data-target="#navbar-example" class="scrollspy-example">
                <h4 id="first">Tumblr farm</h4>
                <p>Ad leggings keytar, brunch id art party dolor labore. Pitchfork yr enim lo-fi before they sold out qui. Tumblr farm-to-table bicycle rights whatever. Anim keffiyeh carles cardigan. Velit seitan mcsweeney's photo booth 3 wolf moon irure. Cosby sweater lomo jean shorts, williamsburg hoodie minim qui you probably haven't heard of them et cardigan trust fund culpa biodiesel wes anderson aesthetic. Nihil tattooed accusamus, cred irony biodiesel keffiyeh artisan ullamco consequat.</p>

                <h4 id="second">Carles aesthetic</h4>
                <p>Veniam marfa mustache skateboard, adipisicing fugiat velit pitchfork beard. Freegan beard aliqua cupidatat mcsweeney's vero. Cupidatat four loko nisi, ea helvetica nulla carles. Tattooed cosby sweater food truck, mcsweeney's quis non freegan vinyl. Lo-fi wes anderson +1 sartorial. Carles non aesthetic exercitation quis gentrify. Brooklyn adipisicing craft beer vice keytar deserunt.</p>

                <h5 id="one">one</h5>
                <p>Occaecat commodo aliqua delectus. Fap craft beer deserunt skateboard ea. Lomo bicycle rights adipisicing banh mi, velit ea sunt next level locavore single-origin coffee in magna veniam. High life id vinyl, echo park consequat quis aliquip banh mi pitchfork. Vero VHS est adipisicing. Consectetur nisi DIY minim messenger bag. Cred ex in, sustainable delectus consectetur fanny pack iphone.</p>

                <h5 id="two">two</h5>
                <p>In incididunt echo park, officia deserunt mcsweeney's proident master cleanse thundercats sapiente veniam. Excepteur VHS elit, proident shoreditch +1 biodiesel laborum craft beer. Single-origin coffee wayfarers irure four loko, cupidatat terry richardson master cleanse. Assumenda you probably haven't heard of them art party fanny pack, tattooed nulla cardigan tempor ad. Proident wolf nesciunt sartorial keffiyeh eu banh mi sustainable. Elit wolf voluptate, lo-fi ea portland before they sold out four loko. Locavore enim nostrud mlkshk brooklyn nesciunt.</p>

                <h5 id="three">three</h5>
                <p>Ad leggings keytar, brunch id art party dolor labore. Pitchfork yr enim lo-fi before they sold out qui. Tumblr farm-to-table bicycle rights whatever. Anim keffiyeh carles cardigan. Velit seitan mcsweeney's photo booth 3 wolf moon irure. Cosby sweater lomo jean shorts, williamsburg hoodie minim qui you probably haven't heard of them et cardigan trust fund culpa biodiesel wes anderson aesthetic. Nihil tattooed accusamus, cred irony biodiesel keffiyeh artisan ullamco consequat.</p>
                <p>Keytar twee blog, culpa messenger bag marfa whatever delectus food truck. Sapiente synth id assumenda. Locavore sed helvetica cliche irony, thundercats you probably haven't heard of them consequat hoodie gluten-free lo-fi fap aliquip. Labore elit placeat before they sold out, terry richardson proident brunch nesciunt quis cosby sweater pariatur keffiyeh ut helvetica artisan. Cardigan craft beer seitan readymade velit. VHS chambray laboris tempor veniam. Anim mollit minim commodo ullamco thundercats.</p>
              </div>

              <p>For this example the overflowing element itself is the target of the <code>scroll</code> event, and above it the <code>.nav</code> component as it's target, while for the other example in this page, the side navigation on the right side, the <code>window</code> is the target of the <code>scroll</code> event.</p>
            </section>

          </section>

          <section id="componentTab">
            <h3>Tab</h3>
            <p>The <b>Tab</b> component covers all original jQuery plugin functionality and even comes with new features such as being able to work with any kind of navigation components in Bootstrap, or providing support for height animation as you can see in the example below.</p>
            <p>The component can initialize both via JavaScript and the DATA API, covers the original events and exposes a specific public method, but in contrast to the original plugin it offers some options for you to play with.</p>

            <section id="tabOptions">
              <h4>Options</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>height</code></td>
                      <td><em>boolean</em></td>
                      <td><em>false</em></td>
                      <td>Option to enable animation of the height of the <code>.tab-content</code> tabs container. Can be set via JavaScript or the <code>data-height="true"</code> attribute.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <p>When you set the option to <code>true</code>, this enables a custom functionality that assumes you are using the styling of the <b>Collapse</b> component, and the <a rel="noreferrer" href="https://github.com/twbs/bootstrap/blob/v3-dev/less/component-animations.less" target="_blank">component animations</a> styling.</p>
              <p><b>Please note</b> that in certain layouts you may need to use the <code>clearfix</code> class for your <code>&lt;div class="tab-content"&gt;</code> element to avoid inconsistent transitions. The option has no effect on legacy browsers.</p>
            </section>

            <section id="tabMethods">
              <h4>Methods</h4>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.show()</h4>
                  <p class="list-group-item-text">The method to be used to switch to a certain tab of your choice via JavaScript. If that tab is already visible or the method is used while animation is running, the
                    method will produce no effect.</p>
                </div>
              </div>
            </section>

            <section id="tabEvents">
              <h4>Events</h4>
              <p>The component events will fire in the exact order shown in table below:</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>hide.bs.tab</code></td>
                      <td>This event fires when a new tab is to be shown (and thus the previous active tab is to be hidden). The <code>event.target</code> is the current active tab, while <code>event.relatedTarget</code>
                        is the new soon-to-be-active tab.</td>
                    </tr>
                    <tr>
                      <td><code>show.bs.tab</code></td>
                      <td>This event fires on tab show, but before the new tab has been shown. The <code>event.target</code> is the tab next to become active and <code>event.relatedTarget</code> is the current
                        active tab (if available).</td>
                    </tr>
                    <tr>
                      <td><code>hidden.bs.tab</code></td>
                      <td>This event fires after a new tab is shown (and thus the previous active tab is hidden). The <code>event.target</code> is the tab that just became inactive and <code>event.relatedTarget</code>
                        is the new active tab.</td>
                    </tr>
                    <tr>
                      <td><code>shown.bs.tab</code></td>
                      <td>This event fires on tab show after a tab has been shown. The <code>event.target</code> is the new active tab and <code>event.relatedTarget</code> is the previous active tab (if available).</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="tabUsage">
              <h4>Usage</h4>
              <h5>Via DATA API</h5>
              <p>Here is a sample markup to showcase the usage of the component with the above mentioned methods. As you can see, each of the elements with the <code>data-toggle="tab"</code> attribute are subject to the
                <b>Tab</b> component initialization.</p>

<pre><code class="language-markup">&lt;!-- for better usage, wrap the tabs and contents --&gt;
&lt;div id="myTabsWrapper"&gt;

  &lt;!-- Nav tabs --&gt;
  &lt;ul id="myTabs" class="nav nav-tabs" role="tablist"&gt;
    &lt;li role="presentation" class="active"&gt;
      &lt;a id="home-tab" href="#home" data-toggle="tab" data-height="true" aria-controls="home" aria-selected="true" role="tab"&gt;Home&lt;/a&gt;
    &lt;/li&gt;
    &lt;li role="presentation"&gt;
      &lt;a id="profile-tab" href="#profile" data-toggle="tab" data-height="true" aria-controls="profile" aria-selected="false" role="tab"&gt;Profile&lt;/a&gt;
    &lt;/li&gt;
    &lt;li role="presentation"&gt;
      &lt;a id="messages-tab" href="#messages" data-toggle="tab" data-height="true" aria-controls="messages" aria-selected="false" role="tab"&gt;Messages&lt;/a&gt;
    &lt;/li&gt;
    &lt;li role="presentation"&gt;
      &lt;a id="settings-tab" href="#settings" data-toggle="tab" data-height="true" aria-controls="settings" aria-selected="false" role="tab"&gt;Settings&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;!-- Tab panes --&gt;
  &lt;div class="tab-content"&gt;
    &lt;div role="tabpanel" class="tab-pane active" aria-labelledby="home-tab" id="home"&gt;...&lt;/div&gt;
    &lt;div role="tabpanel" class="tab-pane" aria-labelledby="profile-tab" id="profile"&gt;...&lt;/div&gt;
    &lt;div role="tabpanel" class="tab-pane" aria-labelledby="messages-tab" id="messages"&gt;...&lt;/div&gt;
    &lt;div role="tabpanel" class="tab-pane" aria-labelledby="settings-tab" id="settings"&gt;...&lt;/div&gt;
  &lt;/div&gt;

&lt;/div&gt;
</code></pre>
              <p>Also don't forget that this functionality works on CSS3 enabled browsers with the <b>Collapse</b> styling in place.</p>

              <h5>Via JavaScript</h5>
              <p>Since the component will target a single element with / or without <code>data-toggle="tab"</code> attribute, but at least it references a corresponding tab via <code>href</code> or
                <code>data-target</code>, we will need to do a simple loop to initialize multiple elements. Assuming the above markup have been injected into the DOM, let's initialize, use the public
                method and attach handlers to the original events.</p>

<pre><code class="language-javascript">// first, we reference the .nav component that holds all tabs
var myTabs = document.getElementById('myTabs');

// let's give the initialization a JavaScript reference for the "target" option
var myTabsCollection = myTabs.getElementsByTagName('A');

// initialize the component for all items in the collection
for (var i = 0; i &lt; myTabsCollection.length; i++) {
  new Tab(myTabsCollection[i], // our target
  { // our options
    height: true
  });
}
</code></pre>

              <p>If each item in the collection meets the expected markup and the tab it referencing is found, the initialization will then validate and give you immediate access to method.</p>

<pre><code class="language-javascript">// get last item from collection and reference it's initialization
var myLastTab = myTabsCollection[myTabsCollection.length-1];
var myLastTabInit = myLastTab.Tab;

// assuming the last tab is not active, we can show it
myLastTabInit.show();

// attach an event handler as well
myLastTab.addEventListener('show.bs.tab', function(event){
  // do some cool stuff
  // event.target is myLastTab
  // event.relatedTarget is the previous active tab
}, false);
</code></pre>

              <p>We could have also built an <code>Object</code> / <code>Array</code> with the initialization objects, but that depends very much on your needs.</p>

            </section>

            <section id="tabExamples" style="position: relative">
              <h4>Example</h4>
              <p>OK now we're ready to put this component to the test. We'll use all Bootstrap <code>.nav</code> components in the pool.</p>

              <ul id="myTab" class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active"><a href="#home" id="home-tab" role="tab" data-height="true" data-toggle="tab" aria-controls="home" aria-expanded="true"><i class="glyphicon glyphicon-home"></i> Home</a></li>
                <li role="presentation"><a href="#profile" role="tab" id="profile-tab" data-height="true" data-toggle="tab" aria-controls="profile">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024" width="14px"  height="14px">
                    <path class="cursor-pointer" d="M576 706.612v-52.78c70.498-39.728 128-138.772 128-237.832 0-159.058 0-288-192-288s-192 128.942-192 288c0 99.060 57.502 198.104 128 237.832v52.78c-217.102 17.748-384 124.42-384 253.388h896c0-128.968-166.898-235.64-384-253.388z" fill="inherit" stroke="inherit" stroke-width="inherit" stroke-linejoin="inherit" stroke-linecap="inherit" stroke-miterlimit="inherit" opacity="1"></path>
                  </svg>
                   Profile</a></li>
                <li role="presentation" class="dropdown">
                  <a href="#" id="myTabDrop1" class="dropdown-toggle" data-toggle="dropdown" data-persist="true" aria-controls="myTabDrop1-contents" aria-expanded="false">Dropdown <span class="caret"></span></a>
                  <ul class="dropdown-menu" role="menu" aria-labelledby="myTabDrop1" id="myTabDrop1-contents">
                    <li><a href="#dropdown1" role="tab" id="dropdown1-tab" data-toggle="tab" data-height="true" aria-controls="dropdown1" aria-expanded="false">Some tab</a></li>
                    <li><a id="tabEventsExample" href="#dropdown2" role="tab" data-height="true" aria-controls="dropdown2" aria-expanded="false">Events</a></li>
                  </ul>
                </li>
              </ul>
              <div id="myTabContent" class="tab-content">
                <div role="tabpanel" class="tab-pane fade active in" id="home" aria-labelledby="home-tab">
                <p>Raw denim you probably haven't heard of them jean shorts Austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica.</p>
                <p>Reprehenderit butcher retro keffiyeh dreamcatcher synth. Cosby sweater eu banh mi, qui irure terry richardson ex squid. Aliquip placeat salvia cillum iphone. Seitan aliquip quis cardigan american apparel, butcher voluptate nisi qui.</p>
                </div>
                <div role="tabpanel" class="tab-pane fade" id="profile" aria-labelledby="profile-tab">
                <p>Food truck fixie locavore, accusamus mcsweeney's marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee. Qui photo booth letterpress, commodo enim craft beer mlkshk aliquip jean shorts ullamco ad vinyl cillum PBR.</p>
                <p>Homo nostrud organic, assumenda labore aesthetic magna delectus mollit. Keytar helvetica VHS salvia yr, vero magna velit sapiente labore stumptown. Vegan fanny pack odio cillum wes anderson 8-bit, sustainable jean shorts beard ut DIY ethical culpa terry richardson biodiesel. Art party scenester stumptown, tumblr butcher vero sint qui sapiente accusamus tattooed echo park.</p>
                </div>
                <div role="tabpanel" class="tab-pane fade" id="dropdown1" aria-labelledby="dropdown1-tab">
                <p>Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney's organic lomo retro fanny pack lo-fi farm-to-table readymade. Messenger bag gentrify pitchfork tattooed craft beer, iphone skateboard locavore carles etsy salvia banksy hoodie helvetica. DIY synth PBR banksy irony. Leggings gentrify squid 8-bit cred pitchfork.</p>
                <p>Williamsburg banh mi whatever gluten-free, carles pitchfork biodiesel fixie etsy retro mlkshk vice blog. Scenester cred you probably haven't heard of them, vinyl craft beer blog stumptown. Pitchfork sustainable tofu synth chambray yr.</p>
                </div>
                <div role="tabpanel" class="tab-pane fade" id="dropdown2" aria-labelledby="tabEventsExample">
                <p><b>This tab has all events attached.</b> Trust fund seitan letterpress, keytar raw denim keffiyeh etsy art party before they sold out master cleanse gluten-free squid scenester freegan cosby sweater. Fanny pack portland seitan DIY, art party locavore wolf cliche high life echo park Austin. Cred vinyl keffiyeh DIY salvia PBR, banh mi before they sold out farm-to-table VHS viral locavore cosby sweater.</p>
                <p>Wolf viral, mustache readymade thundercats keffiyeh craft beer marfa ethical. Wolf salvia freegan, sartorial keffiyeh echo park vegan.</p>
                </div>
              </div>

              <div id="tabSwitcher" class="btn-group">
                <button type="button" class="btn btn-success btn-xs">Toggle View</button>
                <button type="button" class="btn btn-primary btn-xs dropdown-toggle" data-toggle="dropdown" aria-expanded="false"><span class="caret"></span></button>
                <ul class="dropdown-menu pull-right" role="menu">
                  <li class=""><a href="#" data-nclass="nav nav-tabs">Tabs</a></li>
                  <li class=""><a href="#" data-nclass="nav nav-pills">Pills Horizontal</a></li>
                  <li class=""><a href="#" data-nclass="nav nav-pills nav-stacked">Pills Stacked</a></li>
                  <li class=""><a href="#" data-nclass="list-inline">Inline List</a></li>
                  <li class=""><a href="#" data-nclass="nav navbar-nav">Navbar</a></li>
                  <li class=""><a href="#" data-nclass="nav nav-list">Regular Nav</a></li>
                  <li class=""><a href="#" data-nclass="nav panel panel-primary">Panel</a></li>
                </ul>
              </div>

            </section>

          </section>

          <section id="componentTooltip">
            <h3>Tooltip</h3>
            <p>Unlike the original jQuery plugin, our <b>Tooltip</b> component will initialize right away all elements with the <code>data-toggle="tooltip"</code> attribute. Additionally the component can do automatic placement without any options required. At half the size of the original plugin, our component here covers most needed options, methods and original events.</p>

            <section id="tooltipOptions">
              <h4>Options</h4>
              <p>The component covers most important options, excluding some of the options featured in the original jQuery plugin such as a template system needed <code>template</code> option, a <code>selector</code>
                option for auto-initialization, or a <code>trigger</code> option. The component works different but has it's own advantages.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>animation</code></td>
                      <td><em>string</em></td>
                      <td><em>fade</em></td>
                      <td>Option to customize the component animation. If you are using a different animation other than <code>fade</code>, you can specify that via the <code>data-animation="ANIMATION"</code> attribute.
                        This will add an additional CSS class to the tooltip to enable a custom transition.</td>
                    </tr>
                    <tr>
                      <td><code>placement</code></td>
                      <td><em>string</em></td>
                      <td><em>top</em></td>
                      <td>Option to set a specific placement to <code>top</code>, <code>bottom</code>, <code>left</code> or <code>right</code>, relative to it's target. Can be set via both JavaScript and the
                        <code>data-placement="POSITION"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>delay</code></td>
                      <td><em>number</em></td>
                      <td><em>200</em></td>
                      <td>A short delay before hiding the tooltip. Can be set via JavaScript or the <code>data-delay="DELAY"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>container</code></td>
                      <td><em>selector</em><br>or <em>object</em></td>
                      <td><code>&lt;body&gt;</code></td>
                      <td>The container where your tooltips get appended to. You can set the option via JavaScript or the <code>data-container="#elementID"</code> attribute.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <p>If a tooltip is a child element of a modal, a <code>&lt;nav class="navbar-fixed-top"&gt;</code> or a <code>&lt;nav class="navbar-fixed-bottom"&gt;</code>, the <code>container</code> option is set automatically to target that specific parent starting with version 2.0.6.</p>
              <p>Starting with version 2.0.19, in addition to automatic repositioning, the component will try to make sure the tooltips are always in the viewport as some <a rel="noreferrer" href="https://popper.js.org/" target="_blank">Popper.js</a> functionality have been <a href="https://github.com/thednp/bootstrap.native/issues/158">implemented</a> into both V3 and V4 versions.</p>
            </section>

            <section id="tooltipMethods">
              <h4>Methods</h4>
              <p>For full control the <b>Tooltip</b> component exposes a couple of public methods to be used via JavaScript:</p>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.show()</h4>
                  <p class="list-group-item-text">The method shows an initialized tooltip. When the method is executed, it will always <b>create</b> a new tooltip and append it into your desired container.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.hide()</h4>
                  <p class="list-group-item-text">The method hides an initialized tooltip and remove it from it's container and also from the memory, as if you would automatically <em>destroy</em> it.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.toggle()</h4>
                  <p class="list-group-item-text">The method shows the tooltip if hidden and hides it otherwise, using the above two methods.</p>
                </div>
              </div>
              <p>As you can see we don't use a <code>.destroy()</code> method, the reason for that is explained above, so let's explain how this has it's own advantages: if you change the
                <code>data-original-title="Your new title"</code> attribute value, next time you <code>mouseover</code> the element, our component will use the new value without having to reinitialize the element. Sweet!</p>
            </section>

            <section id="tooltipEvents">
              <h4>Events</h4>
              <p>The component's original events are same as with the original jQuery Plugin, except <code>inserted.bs.tooltip</code>, the way the component works makes that this event is not needed, as it would fire
                on every instance of the <code>.show()</code> method.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>show.bs.tooltip</code></td>
                      <td>This event fires immediately when the <code>show</code> instance method is called.</td>
                    </tr>
                    <tr>
                      <td><code>shown.bs.tooltip</code></td>
                      <td>This event is fired when the tooltip has been made visible to the user.</td>
                    </tr>
                    <tr>
                      <td><code>hide.bs.tooltip</code></td>
                      <td>This event is fired immediately when the <code>hide</code> instance method has been called.</td>
                    </tr>
                    <tr>
                      <td><code>hidden.bs.tooltip</code></td>
                      <td>This event is fired when the tooltip has finished being hidden from the user.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="tooltipUsage">
              <h4>Usage</h4>
              <h5>Via DATA API</h5>
              <p>As mentioned before the component will initialize any element found to have the <code>data-toggle="tooltip"</code> attribute and a <code>title</code> attribute or a <code>data-title</code> attribute for SVG elements.</p>
<pre><code class="language-markup">&lt;!-- any regular link with data-toggle="tooltip" --&gt;
&lt;a href="https://google.com" title="Google" data-toggle="tooltip"&gt;Google&lt;/a&gt;

&lt;!-- any SVG shape with data-toggle="tooltip" --&gt;
&lt;svg viewBox="0 0 80 34" width="80" height="34" xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;rect data-toggle="tooltip" data-placement="top" data-delay="150" data-title="Demo Title for SVG" rx="5">&lt;/rect&gt;
&lt;/svg&gt;
</code></pre>
              <h5>Via JavaScript</h5>
              <p>When you insert new items in the page and want them to initialize the component or you want to have full control over your tooltips, the JavaScript way is the best one. You can also initialize for
                elements not having the specific DATA API, but at least have a <code>title="Not null title"</code> attribute. You can do the following:</p>

<pre><code class="language-javascript">// find all elements with title attribute
var elementsTooltip = document.querySelectorAll('[title]');

// attach a tooltip for each
for (var i = 0; i &lt; elementsTooltip.length; i++){
  new Tooltip(elementsTooltip[i], {
    placement: 'top', //string
    animation: 'slideNfade', // CSS class
    delay: 150, // integer
  })
}
</code></pre>

              <p>In addition, similar to any other component of this library, you can access the initialization and the public methods even for elements initialized via DATA API.</p>

<pre><code class="language-javascript">// find an element initialized with Tooltip
var myLinkWithTooltip = document.getElementById('myLinkWithTooltip');

// reference the initialization object
var myTooltipInit = myLinkWithTooltip.Tooltip;
</code></pre>

              <p>Considering the just above element, let's go ahead and put the component's events to use:</p>

<pre><code class="language-javascript">// show.bs.tooltip
myLinkWithTooltip.addEventListener('show.bs.tooltip', function(event){
  // do some cool stuff when .show() method is called
  // event.target is myLinkWithTooltip
}, false);

// shown.bs.tooltip
myLinkWithTooltip.addEventListener('shown.bs.tooltip', function(event){
  // do some cool stuff when .show() method completed
  // event.target is myLinkWithTooltip
}, false);

// hide.bs.tooltip
myLinkWithTooltip.addEventListener('hide.bs.tooltip', function(event){
  // do some cool stuff when .hide() method is called
  // event.target is myLinkWithTooltip
}, false);

// hidden.bs.tooltip
myLinkWithTooltip.addEventListener('hidden.bs.tooltip', function(event){
  // do some cool stuff when .hide() method completed
  // event.target is myLinkWithTooltip
}, false);
</code></pre>

            </section>

            <section id="tooltipExamples">
              <h4>Examples</h4>
              <p>Now let's test all the other placement positions, we start with inline links having the <a href="#" title="Testing bottom placement" data-toggle="tooltip" data-placement="bottom">bottom</a> placement,
                then <a href="#" title="Testing left placement" data-toggle="tooltip" data-placement="left">left</a>, and <a href="#" title="Testing right placement" data-toggle="tooltip" data-placement="right">right</a>.
                Let's put it to the test! Some heavy testing on the automatic repositioning with very very long tooltips.</p>
                <p>

                <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="left" title="&lt;b&gt;Tooltip on left&lt;/b&gt;&lt;br&gt;Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas.">Left</button>
                <button id="tooltipWithEvents" type="button" class="btn btn-default" data-toggle="tooltip" data-placement="top" title="&lt;b&gt;Tooltip on top&lt;/b&gt;&lt;br&gt;This tooltip example has all events attached">Top With Events</button>
                <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="&lt;b&gt;Tooltip on bottom&lt;/b&gt;&lt;br&gt;Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas.">Bottom</button>
                <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="right" title="&lt;b&gt;Tooltip on right&lt;/b&gt;&lt;br&gt;Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas.">Right</button>
                <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="left" title="&lt;b&gt;Tooltip on left&lt;/b&gt; &lt;span class='label label-success'&gt;NEW&lt;/span&gt;&lt;br&gt; Here we add more content for testing. Perhaps adding even more content would make the job more difficult? Nope, same as if this was a very very short tooltip. Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas.">Left</button>
                <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="top" title="&lt;b&gt;Tooltip on top&lt;/b&gt; &lt;span class='label label-danger'&gt;HOT&lt;/span&gt;&lt;br&gt; Here we add more content for testing. Perhaps adding even more content would make the job more difficult? Nope, same as if this was a very very short tooltip. Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas.">Top</button>
                <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="&lt;b&gt;Tooltip on bottom&lt;/b&gt; &lt;span class='label label-warning'&gt;COOL&lt;/span&gt;&lt;br&gt; Here we add more content for testing. Perhaps adding even more content would make the job more difficult? Nope, same as if this was a very very short tooltip. Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas.">Bottom</button>
                <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="right" title="&lt;b&gt;Tooltip on right&lt;/b&gt; &lt;span class='label label-info'&gt;FYI&lt;/span&gt;&lt;br&gt; Here we add more content for testing. Perhaps adding even more content would make the job more difficult? Nope, same as if this was a very very short tooltip. Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas.">Right</button>

                <svg viewBox="0 0 80 34" width="80" height="34" xmlns="http://www.w3.org/2000/svg">
                  <rect data-toggle="tooltip" data-placement="top" data-title="Demo Title for SVG" fill="#fff" stroke="#ccc" stroke-width="1" width="100%" height="100%" rx="5"></rect>
                  <text fill="#333" x="25" y="22" font-size="14">SVG</text>
                </svg>
              </p>
            </section>

          </section>

          <section id="componentPopover">
            <h3>Popover</h3>
            <p>Similar to the above, the <b>Popover</b> component will initialize all elements with the <code>data-toggle="popover"</code> attribute. Unlike the original jQuery plugin, this component does not require
              the <b>Tooltip</b> component and works just about the same as the above except that <b>Popover</b> has the ability to work with templates and trigger options.</p>

            <section id="popoverOptions">
              <h4>Options</h4>
              <p>The component covers all needed options, including those for a template system:</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>template</code></td>
                      <td><em>markup</em></td>
                      <td></td>
                      <td>Option to use a custom HTML template via JavaScript only for your popovers. See examples below for info.</td>
                    </tr>
                    <tr>
                      <td><code>content</code></td>
                      <td><em>markup</em></td>
                      <td></td>
                      <td>Option to set the <b>content</b> of the popover via JavaScript or the <code>data-content="CONTENT"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>title</code></td>
                      <td><em>markup</em></td>
                      <td></td>
                      <td>Option to set the <b>title</b> of the popover via JavaScript or the <code>data-title="TITLE"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>dismissible</code></td>
                      <td><em>boolean</em></td>
                      <td><em>false</em></td>
                      <td>Option to option to make the popover dismissible. When true, it will also add an <kbd>X</kbd> button at the top-right of the popover. You can enable this option via
                        <code>data-dismissible="true"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>trigger</code></td>
                      <td><em>string</em></td>
                      <td><em>hover</em></td>
                      <td>Option to change the component's action trigger event: <em>hover</em>, <em>focus</em> and <em>click</em>. In some cases you may want to open a popover on focus
                        for form elements or click for other buttons, you can specify that via JavaScript or the <code>data-trigger="EVENT"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>animation</code></td>
                      <td><em>string</em></td>
                      <td><em>fade</em></td>
                      <td>Option to customize the component animation. If you are using a different animation other than <code>fade</code>, you can specify that via the <code>data-animation="ANIMATION"</code>
                        attribute. This will add an additional CSS class to the popover to enable a custom transition.</td>
                    </tr>
                    <tr>
                      <td><code>placement</code></td>
                      <td><em>string</em></td>
                      <td><em>top</em></td>
                      <td>Option to set a specific placement to <code>top</code>, <code>bottom</code>, <code>left</code> or <code>right</code>, relative to it's target. Can be set via both JavaScript and the
                        <code>data-placement="POSITION"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>delay</code></td>
                      <td><em>number</em></td>
                      <td><em>200</em></td>
                      <td>A short delay before hiding the popover.<br> Can be set via JavaScript or the <code>data-delay="DELAY"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>container</code></td>
                      <td><em>selector</em><br>or <em>object</em></td>
                      <td><code>&lt;body&gt;</code></td>
                      <td>The container where your popovers get appended to. You can set the option via JavaScript or the <code>data-container="#elementID"</code> attribute.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <p>If a popover is a child element of a modal, a <code>&lt;nav class="navbar-fixed-top"&gt;</code> or a <code>&lt;nav class="navbar-fixed-bottom"&gt;</code> element, the <code>container</code> option is set automatically to target that specific parent starting with version 2.0.6.</p>
            <p>If a proper template is not specified via JavaScript or the content option is not set in any way, the <b>Popover</b> will not be initialized.</p>
            <p>Starting with version 2.0.19, in addition to automatic repositioning, the component will try to make sure the popovers are always in the viewport as some <a rel="noreferrer" href="https://popper.js.org/" target="_blank">Popper.js</a> functionality have been <a href="https://github.com/thednp/bootstrap.native/issues/158">implemented</a> into both V3 and V4 versions.</p>

            </section>

            <section id="popoverMethods">
              <h4>Methods</h4>
              <p>For full control the <b>Popover</b> component exposes a couple of public methods to be used via JavaScript:</p>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.show()</h4>
                  <p class="list-group-item-text">The method shows an initialized popover. When the method is executed, it will always <b>create</b> a new popover and append it into your desired container.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.hide()</h4>
                  <p class="list-group-item-text">The method hides an initialized popover and remove it from it's container and also from the memory, as if you would automatically <em>destroy</em> it.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.toggle()</h4>
                  <p class="list-group-item-text">The method shows the popover if hidden and hides it otherwise, using the above two methods.</p>
                </div>
              </div>
              <p>Also like the <b>Tooltip</b> component, there's no need for a <code>.destroy()</code> method, for the same reason for that is explained before.</p>
            </section>

            <section id="popoverEvents">
              <h4>Events</h4>
              <p>The component's original events are same as with the original jQuery Plugin, except <code>inserted.bs.popover</code>, just as explained for the <b>Tooltip</b> component.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>show.bs.popover</code></td>
                      <td>This event fires immediately when the <code>show</code> instance method is called.</td>
                    </tr>
                    <tr>
                      <td><code>shown.bs.popover</code></td>
                      <td>This event is fired when the popover has been made visible to the user.</td>
                    </tr>
                    <tr>
                      <td><code>hide.bs.popover</code></td>
                      <td>This event is fired immediately when the <code>hide</code> instance method has been called.</td>
                    </tr>
                    <tr>
                      <td><code>hidden.bs.popover</code></td>
                      <td>This event is fired when the popover has finished being hidden from the user.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="popoverUsage">
              <h4>Usage</h4>
              <h5>Via DATA API</h5>
              <p>So out component will initialize any element found to have the <code>data-toggle="popover"</code> attribute and a <code>data-content</code> attribute.</p>

<pre><code class="language-markup">&lt;!-- any regular link with data-toggle="popover" --&gt;
&lt;a href="https://google.com" data-title="Google" data-content="Google is cool" data-toggle="popover"&gt;Google&lt;/a&gt;

&lt;!-- any SVG shape with data-toggle="popover" --&gt;
&lt;svg viewBox="0 0 80 34" width="80" height="34" xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;rect data-toggle="popover" data-placement="top" data-delay="150" data-content="Demo Title for SVG" rx="5">&lt;/rect&gt;
&lt;/svg&gt;
</code></pre>

              <h5>Via JavaScript</h5>
              <p>After inserting new content into the page, you can initialize any element with <b>Popover</b> via JavaScript. You can also initialize for elements not having the specific DATA API. You can do the following:</p>
<pre><code class="language-javascript">// find all elements with data-content attribute
var elementsPopover = document.querySelectorAll('[data-content]'); // also a certain class would go fine

// attach a popover for each
for (var i = 0; i &lt; elementsPopover.length; i++){
  new Popover(elementsPopover[i], {
    placement: 'top', //string
    animation: 'slideNfade', // CSS class
    delay: 100, // integer
    dismissible: true, // boolean
  })
}
</code></pre>

              <p>In addition, similar to any other component of this library, you can access the initialization and the public methods even for elements initialized via DATA API.</p>

<pre><code class="language-javascript">// find an element initialized with Popover
var myLinkWithPopover = document.getElementById('myLinkWithPopover');

// reference the initialization object
var myPopoverInit = myLinkWithPopover.Popover;
</code></pre>

              <p>Considering the just above element, let's go ahead and put the component's events to use:</p>

<pre><code class="language-javascript">// show.bs.popover
myLinkWithPopover.addEventListener('show.bs.popover', function(event){
  // do some cool stuff when .show() method is called
  // event.target is myLinkWithPopover
}, false);

// shown.bs.popover
myLinkWithPopover.addEventListener('shown.bs.popover', function(event){
  // do some cool stuff when .show() method completed
  // event.target is myLinkWithPopover
}, false);

// hide.bs.popover
myLinkWithPopover.addEventListener('hide.bs.popover', function(event){
  // do some cool stuff when .hide() method is called
  // event.target is myLinkWithPopover
}, false);

// hidden.bs.popover
myLinkWithPopover.addEventListener('hidden.bs.popover', function(event){
  // do some cool stuff when .hide() method completed
  // event.target is myLinkWithPopover
}, false);
</code></pre>

              <p>To use the template system, you can do the following:</p>

<pre><code class="language-javascript">//define some variables or get their values from other scripts
var someTitleFromOtherCode = 'Sample title';
var someContentFromOuterSpace = '&lt;p&gt;Some sample message.&lt;/p&gt;';

//initiate Popover with the template
var popover2 = new Popover('.popover-via-template', { // where .popover-via-template is the text input
  trigger: 'focus',
  template: '&lt;div class="popover" role="tooltip"&gt;'
  + '&lt;div class="arrow"&gt;&lt;/div&gt;'
  + '&lt;h3 class="popover-title"&gt;'+someTitleFromOtherCode+'&lt;/h3&gt;'
  + '&lt;div class="popover-content"&gt;'+someContentFromOuterSpace+'&lt;/div&gt;'
  + '&lt;/div&gt;'
});
</code></pre>

            </section>

            <section id="popoverExamples">

              <h4>Examples</h4>
              <p>First let's test all the placement positions, we start with inline links having the <a href="#" data-toggle="popover" data-placement="bottom" data-content="Testing bottom placement">bottom</a>
                placement, then <a href="#" data-toggle="popover" data-placement="left" data-content="Testing left placement">left</a>, and
                <a href="#" data-toggle="popover" data-placement="right" data-content="Testing right placement">right</a>.</p>
              <p>Now we are going to test buttons with a popover with large contents. The last two examples below are using the template system and different trigger options. The popover generated for the last two
                examples can be dismissed on window resize or blur (focus out).</p>
              <p>
                <button type="button" class="btn btn-default" data-toggle="popover" data-placement="left" data-content="Popover on left">Left</button>
                <button id="popoverWithEvents" type="button" class="btn btn-default" data-toggle="popover" data-placement="top" data-content="Popover on top">Top with Events</button>
                <button type="button" class="btn btn-default" data-toggle="popover" data-placement="bottom" data-content="Popover on bottom<br> Here we add more content for testing. Completely synergize resource sucking relationships via premier niche markets.">Bottom</button>
                <button type="button" class="btn btn-default" data-dismissible="true" data-toggle="popover" data-title="Dismissible Popover <span class='badge'>COOL</span>" data-placement="right" data-content="Here we add more content for testing. Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas.">Right Dismissible</button>
                <input style="max-width: 180px; display: inline;" type="text" value="" class="form-control popover-via-template" placeholder="Focus me" data-toggle="popover">
                <button type="button" id="popover-via-click" class="btn btn-default" data-content="You clicked the button and as a result, this message box simply.. popped.<br>Now simply click anywhere to dismiss.">Click to open</button>
                <svg viewBox="0 0 80 34" width="80" height="34" xmlns="http://www.w3.org/2000/svg">
                  <rect data-toggle="popover" data-placement="top" data-title="Demo Popover Title for SVG" data-content="This is a demo popover for SVG elements." fill="#fff" stroke="#ccc" stroke-width="1" width="100%" height="100%" rx="5"></rect>
                  <text fill="#333" x="25" y="22" font-size="14">SVG</text>
                </svg>
              </p>
            </section>
          </section>

          <section id="componentAlert">
            <h3>Alert</h3>
            <p>The <b>Alert</b> component covers the specific original event and public method, but does not provide any option. Still, the component will initialize both via JavaScript or the DATA API. In
              contrast with the original plugin is the fact that the component does not require the class <code>alert-dismissible</code> in order to work.</p>

            <section id="alertOptions">
              <h4>Options</h4>
              <p>This component has no options.</p>
            </section>

            <section id="alertMethods">
              <h4>Methods</h4>
              <p>The <b>Alert</b> component exposes a single public method to be used via JavaScript:</p>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.close()</h4>
                  <p class="list-group-item-text">The method hides an initialized alert and remove it from DOM.</p>
                </div>
              </div>
            </section>

            <section id="alertEvents">
              <h4>Events</h4>
              <p>The component's original events are same as with the original jQuery Plugin.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>close.bs.alert</code></td>
                      <td>This event is fired immediately when the <code>close</code> instance method has been called.</td>
                    </tr>
                    <tr>
                      <td><code>closed.bs.alert</code></td>
                      <td>This event is fired when the alert has finished being hidden from the user.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="alertUsage">
              <h4>Usage</h4>
              <h5>Via DATA API</h5>
              <p>The component will initialize all elements with proper DATA API found in the DOM. Note that the <code>data-dismiss="alert"</code> attribute is required for the triggering button.</p>

<pre><code class="language-markup">&lt;!-- notice the &lt;button&gt; with the data-dismiss="alert" attribute --&gt;
&lt;div id="myWarningAlert" class="alert alert-warning alert-dismissible fade in" role="alert"&gt;
  &lt;button type="button" class="close" data-dismiss="alert" aria-label="Close"&gt;
    &lt;span aria-hidden="true"&gt;×&lt;/span&gt;
  &lt;/button&gt;
  Some critical notice.
&lt;/div&gt;
</code></pre>

              <h5>Via JavaScript</h5>
              <p>After inserting a new alert into the page, you can initialize it via JavaScript. Considering the above markup, you can do the following:</p>

<pre><code class="language-javascript">// find all elements with data-content attribute
var myWarningAlert = document.getElementById('myWarningAlert');

// initialize
var myWarningAlertInit = new Alert(myWarningAlert);
</code></pre>

              <p>Also attach handlers to the original events:</p>

<pre><code class="language-javascript">// close.bs.alert
myWarningAlert.addEventListener('close.bs.alert', function(event){
  // do something cool
  // event.target is &lt;div class="alert"&gt;
}, false);

// closed.bs.alert
myWarningAlert.addEventListener('closed.bs.alert', function(event){
  // do something cool
  // event.target is &lt;div class="alert"&gt;
}, false);
</code></pre>

              <p>Like all components of the library you can access the initialization object even if it was done via the DATA API:</p>

<pre><code class="language-javascript">// find an element initialized via DATA API
var myAlertButton = document.getElementById('myAlertButton');

// reference the initialization object
var myAlertInit = myAlertButton.Alert;

// apply the public method
myAlertInit.close();
</code></pre>

            </section>

            <section id="alertExamples">
              <h4>Examples</h4>
              <p>This alert has some handlers attached to <code>close.bs.alert</code> and <code>closed.bs.alert</code> events, so check your console.</p>
              <div id="alertDemo" class="alert alert-warning alert-dismissible fade in" role="alert">
                <button type="button" class="close" id="alertDemo1" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                <b>Holy guacamole!</b> Best check yo self, you're not looking too good.
              </div>

              <p>This alert uses the <code>closed.bs.alert</code> event to show another alert.</p>
              <div class="alert alert-danger alert-dismissible fade in" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                <h4>Oh snap! You got an error!</h4>
                <p>If you close this alert, your PC will start formatting your drive.</p>
                <button type="button" class="btn btn-danger">Take this action</button>
              </div>

            </section>
          </section>

          <section id="componentButton">
            <h3>Button</h3>
            <p>The <b>Button</b> component provides text/stateful switch and toggle checkboxes and radio buttons for button groups. The component provides a custom event for the button groups' toggling, not covered by the original jQuery Plugin.</p>
            <p><b>Button</b> doesn't cover <a rel="noreferrer" href="http://getbootstrap.com/javascript/#buttons-single-toggle" target="_blank">single toggle</a> feature. The supported toggle feature could very much fill the same purpose.</p>
            <section id="buttonOptions">
              <h4>Options</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>option</code></td>
                      <td><em>string</em></td>
                      <td></td>
                      <td>The only option is for the component's stateful switch. Can be used <b>only</b> in a combination of the <code>data-OPTION-text="Button text"</code> attribute and a JavaScript call.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="buttonMethods">
              <h4>Methods</h4>
              <p>The <b>Button</b> component exposes no public methods.</p>
            </section>

            <section id="buttonEvents">
              <h4>Events</h4>
              <p>Unlike the original jQuery Plugin, the <b>Button</b> component comes with an original event, consistent in all supported browsers.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>change.bs.button</code></td>
                      <td>The event is fired for a <code>.btn-group</code> and each child <code>.btn</code> that changed it's <code>checked</code> state.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="buttonUsage">
              <h4>Usage</h4>
              <h5>Stateful Switching</h5>
              <p>The component will help you call for text switching on button elements with proper DATA API, but you have to manually call via JavaScript. This feature <b>doesn't require</b> the <code>data-toggle="button"</code> attribute, only one or more <code>data-OPTION-text="Your text"</code> attribute(s), so let's consider a button for instance:</p>

<pre><code class="language-markup">&lt;!-- a basic markup for the button --&gt;
&lt;button type="button" id="myButton" data-loading-text="Loading..." class="btn btn-primary"&gt;
  Loading state
&lt;/button&gt;
</code></pre>

              <p>Now this button markup is using the specific DATA API but <b>it won't do anything by itself unless you call it via JavaScript</b>. There always has to be an action to call the change of the button's state
                such as event handlers:</p>

<pre><code class="language-javascript">// grab the above .btn element
var btn = document.getElementById('myButton');

// let's say we call the switch on click
btn.addEventListener('click', function() {
  Button(btn,'loading');
});
// this assumes Button is using "loading" as an option from the data-loading-text="Loading..." attribute
</code></pre>

              <p>When the button is clicked, it will change its text and because <code>loading</code> is a special option, the component will add a <code>disabled</code> CSS class to
                the button and a new <code>data-original-text="Loading State"</code> attribute.</p>

              <p>To reset the button to it's original state, we have to do the same thing but use a different option, so let's say we need to hook into an instance of <code>XMLHttpRequest</code>, here's what you do:</p>

<pre><code class="language-javascript">// create a new instance of XMLHttpRequest
var xhr = new XMLHttpRequest();
xhr.open('GET', 'https://www.google.com');

// bind into the context of the readyStateChange event
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4)  {
    // do something specific when complete
    // here we call the Button state change
    Button(btn,'reset');
  }
};
xhr.send();
</code></pre>

              <p>When the <em>reset</em> option is used, the component will look for the <code>data-original-text</code> attribute and use its value for the button's text. In addition, if the button was made disabled
                via the <code>loading</code> option, it will remove the <code>disabled="disabled"</code> attribute and the <code>disabled</code> CSS class, to fully restore the element to it's original state.</p>
              <p>After the use of the <code>loading</code> option, we could have used <code>data-original-text</code> and <code>Button(btn,'original');</code> but it woulnd't have the same effect as the <em>reset</em> option.
                It would simply update the text but not the other option's <em>disabled</em> CSS class and attribute.</p>

              <h5>Radios / Checkboxes Toggling</h5>
              <p>This function applies to radio buttons and checkboxes that use the special <code>.btn-group</code> Bootstrap component's markup:</p>

<pre><code class="language-markup"> &lt;!-- the btn-group component --&gt;
&lt;div id="myRadioButtonGroup" class="btn-group" data-toggle="buttons"&gt;
  &lt;label class="btn btn-default active"&gt;
    &lt;input type="radio" autocomplete="off" checked&gt; Checkbox 1 (pre-checked) &lt;!-- OR type="radio" --&gt;
  &lt;/label&gt;
  &lt;label class="btn btn-default"&gt;
    &lt;input type="radio" autocomplete="off"&gt; Checkbox 2 &lt;!-- OR type="radio" --&gt;
  &lt;/label&gt;
  &lt;label class="btn btn-default"&gt;
    &lt;input type="radio" autocomplete="off"&gt; Checkbox 3 &lt;!-- OR type="radio" --&gt;
  &lt;/label&gt;
&lt;/div&gt;
</code></pre>

              <p>Starting with bootstrap.native version 2.0.20 and above, the component will allow users to toggle checkbox / radio inputs via keyboard <kbd>Space</kbd> key, a must have feature for real world form application. <a href="#buttonExamples">Examples</a> will showcase this feature.</p>
              <p>Keep in mind that keyboard navigation for checkbox inputs can be done via the <kbd>Tab</kbd>/<kbd>Shift</kbd>+<kbd>Tab</kbd> keys, while for radio inputs is done via <kbd>&lt;</kbd> and <kbd>&gt;</kbd> keys.</p>
              <p>If the above markup is present in the DOM when the library is loaded, it will initialize via DATA API, if inserted later into the DOM, here's how to initialize it:</p>

<pre><code class="language-javascript">// find the element to apply Button to
var myRadioButtonGroup = document.getElementById('myRadioButtonGroup');

// initialize
var myRadioButtonGroupINIT = new Button(myRadioButtonGroup);
</code></pre>

              <p>If the component finds the markup to meet all requirements, it will initialize it and the <code>myRadioButtonGroup</code> element will store the initialization, just like the other components of the library:</p>

<pre><code class="language-javascript">// reference the initialization, even for DATA API initialized btn-group elements
var myRadioButtonGroupINIT = myRadioButtonGroup.Button;
</code></pre>

              <p>The only thing left to do is to attach handlers to the original events:</p>

<pre><code class="language-javascript">//let's do some custom binding action
myRadioButtonGroup.addEventListener('change.bs.button', function(event) {
  // do something when anything inside the btn-group changes
  // event.target is myRadioButtonGroup
});
myRadioButtonGroup.getElementsByTagName('INPUT')[0].addEventListener('change.bs.button',function(event) {
  // do something only when THE FIRST input changes
  // event.target is the first &lt;input type="radio"&gt; found in myRadioButtonGroup
});
</code></pre>

              <p>Since the native <code>change</code> event isn't consistent in legacy browsers, with the help of polyfills and the original <code>change.bs.button</code> event you can easily bind other
                functions into the context of a <code>.btn-group</code> and / or it's child inputs.</p>

            </section>

            <section id="buttonExamples">
              <h4>Examples</h4>
              <h5>Stateful Switching</h5>
              <p>Here is a quick example of button state switch just like the original plugin example, we use the <code>loading</code> state for the button. For the purpose of testing here,
                the button will come back to original state after a short <code>setTimeout</code> delay and the usage of <code>reset</code> option.</p>
              <p><button type="button" id="myButton" data-loading-text="Loading..." class="btn btn-primary">Loading state</button></p>
              <div id="successButton" style="display: none" class="alert alert-success alert-dismissible fade" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                <b>Testing was successful!</b><br>The buttons has been reset via <code>Button(btn,"reset")</code> option on a 2 seconds timeout after the <code>Button(btn,"loading")</code> was used.
              </div>

              <h5>Radios / Checkboxes Toggling</h5>
              <p>You should open your console to test the handler functions bound by the <code>change.bs.button</code> event of the following checkboxes and radio buttons. You should notice that the event isn't triggered twice and it works properly with IE8+.</p>
              <p>First we'll toggle some checkboxes. </p>
              <p>
                <span id="checkboxButtons" class="btn-group" data-toggle="buttons">
                  <label class="btn btn-default active">
                    <span class="glyphicon glyphicon-plus-sign"></span>
                    <input type="checkbox" autocomplete="off" checked> Checkbox 1 (pre-checked)
                  </label>
                  <label class="btn btn-default">
                    <span class="glyphicon glyphicon-plus-sign"></span>
                    <input type="checkbox" autocomplete="off"> Checkbox 2
                  </label>
                  <label class="btn btn-default">
                    <span class="glyphicon glyphicon-plus-sign"></span>
                    <input type="checkbox" autocomplete="off"> Checkbox 3
                  </label>
                </span>
              </p>
              <p>Finally we toggle radio buttons.</p>
              <p>
                <span id="radioButtons" class="btn-group" data-toggle="buttons">
                  <label class="btn btn-default">
                    <span class="glyphicon glyphicon-ok-sign"></span>
                    <input type="radio" name="options" id="option1" autocomplete="off"> Radio 1
                  </label>
                  <label class="btn btn-default active">
                    <span class="glyphicon glyphicon-ok-sign"></span>
                    <input type="radio" name="options" id="option2" autocomplete="off" checked> Radio 2 (preselected)
                  </label>
                  <label class="btn btn-default">
                    <span class="glyphicon glyphicon-ok-sign"></span>
                    <input type="radio" name="options" id="option3" autocomplete="off"> Radio 3
                  </label>
                </span>
              </p>

              <p>In addition, the component will also work outside the <code>&lt;div class="btn-group"&gt;</code>.</p>
              <p>
                <span data-toggle="buttons">
                  <label class="btn btn-default">
                    <span class="glyphicon glyphicon-ok-sign"></span>
                    <input type="radio" name="features" id="feature1" autocomplete="off"> Radio 1
                  </label>
                  <label class="btn btn-default active">
                    <span class="glyphicon glyphicon-ok-sign"></span>
                    <input type="radio" name="features" id="feature2" autocomplete="off" checked> Radio 2 (preselected)
                  </label>
                  <label class="btn btn-default">
                    <span class="glyphicon glyphicon-ok-sign"></span>
                    <input type="radio" name="features" id="feature3" autocomplete="off"> Radio 3
                  </label>
                </span>
              </p>

            </section>
          </section>

          <section id="componentCollapse">
            <h3>Collapse</h3>
            <p>The <b>Collapse</b> component covers the original events and methods of the jQuery plugin counterpart. This component understands there is a triggering element that finds its target collapsible element via the <code>data-target="#collapse-id"</code> attribute or the <code>href="#collapse-id"</code> attribute if it's a link.</p>

            <section id="collapseOptions">
              <h4>Options</h4>
              <p>The option below allow you to connect a collapse to a parent accordion.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>parent</code></td>
                      <td><em>selector</em><br>or<br>reference</td>
                      <td></td>
                      <td>Option to reference a parent to be used as an accordion. When a parent is set and found, it will enable the functionality described in the <code>show()</code> method below. Can be set
                        via JavaScript or the <code>data-parent="SELECTOR"</code> attribute.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="collapseMethods">
              <h4>Methods</h4>
              <p>Calling any of the public methods while animation is running, will produce no effect.</p>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.show()</h4>
                  <p class="list-group-item-text">The method will expand a collapsible element. In addition, if the collapsible element is part of an accordion (it's options include a reference to a parent), it will also close any other visible collapsible element.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.hide()</h4>
                  <p class="list-group-item-text">The method hides a collapsible element.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.toggle()</h4>
                  <p class="list-group-item-text">The method will show / or hide a collapsible element using the above methods and their full functionalities.</p>
                </div>
              </div>
            </section>

            <section id="collapseEvents">
              <h4>Events</h4>
              <p>All the component's events are attached to the collapsible element and not its targeting button / element, with other words, the <code>event.target</code> is the element with the <code>class="collapse"</code> attribute.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>show.bs.collapse</code></td>
                      <td>This event fires immediately when the <code>show</code> instance method is called.</td>
                    </tr>
                    <tr>
                      <td><code>shown.bs.collapse</code></td>
                      <td>This event is fired when a collapse element has been made visible to the user.</td>
                    </tr>
                    <tr>
                      <td><code>hide.bs.collapse</code></td>
                      <td> This event is fired immediately when the <code>hide</code> method has been called. </td>
                    </tr>
                    <tr>
                      <td><code>hidden.bs.collapse</code></td>
                      <td>This event is fired when a collapse element has been hidden from the user.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="collapseUsage">
              <h4>Usage</h4>
              <h5>Via DATA API</h5>
              <p>In the following markup, the component will initialize on the two <code>.btn.btn-primary</code> elements with the <code>data-toggle="collapse"</code>, both targeting the same collapsible element with specific atttributes.</p>

<pre><code class="language-markup">&lt;!-- toggle collapse via link with HREF reference --&gt;
&lt;a id="collapseLink" class="btn btn-primary" role="button" aria-expanded="false" aria-controls="collapseExample"
  data-toggle="collapse" href="#collapseExample"&gt; &lt;!-- required DATA API --&gt;
  Link with href
&lt;/a&gt;

&lt;!-- AND / OR toggle collapse via button with data-target attribute reference --&gt;
&lt;button id="collapseButton" class="btn btn-primary" type="button" aria-expanded="false" aria-controls="collapseExample"
  data-toggle="collapse" data-target="#collapseExample"&gt; &lt;!-- required DATA API --&gt;
  Button with data-target
&lt;/button&gt;

&lt;!-- and the basic collapsible template --&gt;
&lt;div class="collapse" id="collapseExample"&gt;
  &lt;div class="well"&gt;
    ...
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

                <p>Now if we stack multiple collapsible elements and wrap them into one parent with an ID attribute and some helper CSS classes, we can easily create an accordion.</p>

<pre><code class="language-markup">&lt;!-- accordion template --&gt;
&lt;div class="panel-group" id="myAccordion" role="tablist" aria-multiselectable="true"&gt;
  &lt;div class="panel panel-default"&gt;
    &lt;div class="panel-heading" role="tab" id="headingOne"&gt;
      &lt;h4 class="panel-title"&gt;
        &lt;a role="button" data-toggle="collapse" data-parent="#myAccordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne"&gt;
          Collapsible Group Item #1
        &lt;/a&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id="collapseOne" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne"&gt;
      &lt;div class="panel-body"&gt;
        Collapse CONTENT 1
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="panel panel-default"&gt;
    &lt;div class="panel-heading" role="tab" id="headingTwo"&gt;
      &lt;h4 class="panel-title"&gt;
        &lt;a class="collapsed" role="button" data-toggle="collapse" data-parent="#myAccordion" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo"&gt;
          Collapsible Group Item #2
        &lt;/a&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id="collapseTwo" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo"&gt;
      &lt;div class="panel-body"&gt;
        Collapse CONTENT 2
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="panel panel-default"&gt;
    &lt;div class="panel-heading" role="tab" id="headingThree"&gt;
      &lt;h4 class="panel-title"&gt;
        &lt;a class="collapsed" role="button" data-toggle="collapse" data-parent="#myAccordion" href="#collapseThree" aria-expanded="false" aria-controls="collapseThree"&gt;
          Collapsible Group Item #3
        &lt;/a&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id="collapseThree" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree"&gt;
      &lt;div class="panel-body"&gt;
        Collapse CONTENT 3
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

              <h5>Via JavaScript</h5>
              <p>If the above single collapse template have been inserted into the DOM, you need to initialize it via JavaScript.</p>

<pre><code class="language-javascript">// grab the accordion by its ID
var collapseLink = document.getElementById('collapseLink');

// initialize the component for this collapse trigger
var myCollapseInit = new Collapse(collapseLink)
</code></pre>

              <p>This now enables you to work with the public methods.</p>

<pre><code class="language-javascript">// call the show() right away
myCollapseInit.show();

// call the hide() later
// myCollapseInit.hide();

// OR call toggle() some other time
// myCollapseInit.toggle();
</code></pre>

              <p>Also we can attach some handlers to the original events:</p>

<pre><code class="language-javascript">// first, we need to reference the collapsible element
var myCollapseExample = document.getElementById(collapseLink.getAttribute('href').replace('#',''));

// attach a handler to the `show.bs.collapse` original event
myCollapseExample.addEventListener('show.bs.collapse', function(event){
  // do something cool when .show() method is called
  // event.target is myCollapseExample
}, false);
</code></pre>

              <p>Alright, now let's say the above accordion template have been inserted into the DOM, you need to initialize its collapsible elements right away via JavaScript.</p>

<pre><code class="language-javascript">// grab the accordion by its ID
var myAccordion = document.getElementById('myAccordion');

// grab the collapsible triggers for this accordion
var myAccordionTriggers = myAccordion.querySelectorAll('[data-toggle="collapse"]');

// initialize the component for each collapse trigger
for (var i = 0; i &lt; myAccordionTriggers.length; i++){
  new Collapse(myAccordionTriggers[i], {
    parent: myAccordion // this is the above defined object
  });
}
</code></pre>

              <p>The component grants access to the initialization even for instances where the DATA API was used.</p>

<pre><code class="language-javascript">// grab the collapse trigger initialized via DATA API
var myCollapseTrigger = document.getElementById('myCollapseTrigger');

// reference the initialization
var myCollapseTriggerInit = myCollapseTrigger.Collapse;
</code></pre>

            </section>
            <section id="collapseExamples">
              <h4>Examples</h4>
              <h5>Single collapsible element</h5>
              <p>Here's a quick demo with a single collapsible element, using the <code>.well</code> as the container, exactly as described in the <a href="#collapseUsage">Usage</a> section. The demo also features the original events. </p>
              <div id="collapseExampleWrapper" class="panel panel-default">
                <p>
                  <span class="btn-group">
                    <a class="btn btn-primary" data-toggle="collapse" href="#collapseExample" aria-expanded="true" aria-controls="collapseExample">HREF</a>
                    <button class="btn btn-primary" type="button" data-toggle="collapse"  data-target="#collapseExample" aria-expanded="true" aria-controls="collapseExample">data-target</button>
                  </span>
                </p>
                <div class="collapse" id="collapseExample" aria-expanded="false" role="presentation">
                  <div class="well">
                    Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.
                  </div>
                </div>
              </div>

              <h5>Accordion / multiple collapsible elements</h5>
              <p>Here's an <b>Accordion</b> example, built with a set of <b>Panel</b>s wrapped in a <code>&lt;div class="panel-group"&gt;</code> element. When the toggle links are clicked, our <b>Collapse</b> component will look for the closest <code>&lt;div class="accordion-className"&gt;</code> or <code>&lt;div id="accordion-id"&gt;</code> via <code>data-parent="selector"</code> and will hide any visible collapsible element.</p>
              <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
                <div class="panel panel-default">
                <div class="panel-heading" role="tab" id="headingOne">
                  <h4 class="panel-title" id="-collapsible-group-item-#1-">
                  <a data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Collapsible Group Item #1
                  </a>
                  </h4>
                </div>
                <div id="collapseOne" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">
                  <div class="panel-body">
                  Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
                  </div>
                </div>
                </div>
                <div class="panel panel-default">
                <div class="panel-heading" role="tab" id="headingTwo">
                  <h4 class="panel-title" id="-collapsible-group-item-#2-">
                  <a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Collapsible Group Item #2
                  </a>
                </h4>
                </div>
                <div id="collapseTwo" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                  <div class="panel-body">
                  Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
                  </div>
                </div>
                </div>
                <div class="panel panel-default">
                <div class="panel-heading" role="tab" id="headingThree">
                  <h4 class="panel-title" id="-collapsible-group-item-#3-">
                  <a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Collapsible Group Item #3
                  </a>
                  </h4>
                </div>
                <div id="collapseThree" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree">
                  <div class="panel-body">
                  Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
                  </div>
                </div>
                </div>
              </div>
              <p>Remember that all triggering buttons must reference the accordion via <code>data-parent="selector"</code> as described above in order to collapse current opened collapsible element.</p>
            </section>
          </section>

          <section id="componentCarousel">
            <h3>Carousel</h3>
            <p>The <b>Carousel</b> component covers the original events, along with a set of useful options and public methods. In addition it also provides a solid DATA API, it adds a <code>paused</code> class to the targeted element when in paused state, and a solid event handling implementation.</p>

            <section id="carouselOptions">
              <h4>Options</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>keyboard</code></td>
                      <td><em>boolean</em></td>
                      <td><em>true</em></td>
                      <td>Option that allows yout to navigate the carousel with left and right arrows.</td>
                    </tr>
                    <tr>
                      <td><code>pause</code></td>
                      <td><em>boolean</em><br>or<br> the text <em>'hover'</em></td>
                      <td><em>'hover'</em></td>
                      <td>Option that makes possible to pause the carousel transition on mouse hover and touchdown. If you want to disable pause on hover, do that via JavaScript or the <code>data-pause="false"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>interval</code></td>
                      <td><em>number</em></td>
                      <td><em>5000</em></td>
                      <td>Option the component's delay between transitions in miliseconds. Can be set via JavaScript or the <code>data-interval="INTERVAL"</code> attribute. If you want to disable the automatic transition, you can set this option to <em>false</em>. Starting with version 2.0.19 the component will not automatically slide if the element is not visible in the viewport.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="carouselMethods">
              <h4>Methods</h4>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.cycle()</h4>
                  <p class="list-group-item-text">The method will cycle through items. Using the method while the animation is running will produce no effect.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.slideTo()</h4>
                  <p class="list-group-item-text">The method will allow you to jump to the index of a certain item. Using the method while the animation is running will produce no effect.</p>
                </div>
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.getActiveIndex()</h4>
                  <p class="list-group-item-text">The method returns the index of the current active item.</p>
                </div>
              </div>
            </section>

            <section id="carouselEvents">
              <h4>Events</h4>
              <p>All the component's events are attached to the <code>&lt;div class="carousel"&gt;</code> element, and the <code>event.relatedTarget</code> is the newly activated carousel item. The events provide no mention of the animation direction, because most polyfills do not allow us to set new custom properties to the event objects, we store the transition direction in the initialization object. See the <a href="#usageCarousel">Usage</a> section.</p>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>slide.bs.carousel</code></td>
                      <td>This event fires immediately when the <code>slideTo()</code> instance method is called.</td>
                    </tr>
                    <tr>
                      <td><code>slid.bs.carousel</code></td>
                      <td>This event is fired when transition has finished.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="carouselUsage">
              <h4>Usage</h4>
              <h5>Via DATA API</h5>
              <p>The component covers most of the original implementation in regards to DATA API, except that you can ignore <code>data-slide="prev"</code> and <code>data-slide="next"</code> attributes for the controls, but they must have at least the class <code>carousel-control</code> in order to work. The elements with the <code>data-ride="carousel"</code> attribute will be initialized via DATA API, and the basic template looks like this: </p>

<pre><code class="language-markup">&lt;!-- the Carousel component --&gt;
&lt;div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="5000"&gt;
  &lt;!-- Indicators --&gt;
  &lt;ol class="carousel-indicators"&gt;
    &lt;li data-target="#myCarousel" data-slide-to="0" class="active"&gt;&lt;/li&gt;
    &lt;li data-target="#myCarousel" data-slide-to="1"&gt;&lt;/li&gt;
    &lt;li data-target="#myCarousel" data-slide-to="2"&gt;&lt;/li&gt;
  &lt;/ol&gt;
  &lt;!-- Wrapper for slides --&gt;
  &lt;div class="carousel-inner" role="listbox"&gt;
    &lt;div class="item active"&gt;
      &lt;img src="https://unsplash.it/837/300?image=0" alt=""&gt;
      &lt;div class="carousel-caption"&gt;
      &lt;h3&gt;This is another carousel&lt;/h3&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="item"&gt;
      &lt;img src="https://unsplash.it/837/300?image=10" alt=""&gt;
      &lt;div class="carousel-caption"&gt;
      &lt;h3&gt;This is a caption&lt;/h3&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="item"&gt;
      &lt;img src="https://unsplash.it/837/300?image=210" alt=""&gt;
      &lt;div class="carousel-caption"&gt;
      &lt;h3&gt;This is another caption&lt;/h3&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;!-- Controls --&gt;
  &lt;a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev"&gt;
    &lt;span class="glyphicon glyphicon-chevron-left" aria-hidden="true"&gt;&lt;/span&gt;
    &lt;span class="sr-only"&gt;Previous&lt;/span&gt;
  &lt;/a&gt;
  &lt;a class="right carousel-control" href="#myCarousel" role="button" data-slide="next"&gt;
    &lt;span class="glyphicon glyphicon-chevron-right" aria-hidden="true"&gt;&lt;/span&gt;
    &lt;span class="sr-only"&gt;Next&lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;
</code></pre>
              <p>A quick walk through the attributes:</p>
              <ul>
                <li><code>id="myCarousel"</code> is required only if you inject the above template into the DOM and need a way to target this specific element, unlike the original jQuery plugin that requires this attribute for the its internal event handlers;</li>
                <li><code>data-ride="carousel"</code> makes the element targetable by the <b>Carousel</b> component;</li>
                <li><code>data-interval="5000"</code> sets the automatic slide interval;</li>
                <li><code>data-slide-to="0"</code> when clicked, will slide to the carousel item with that index, 0 (zero) in this case;</li>
                <li><code>data-slide="prev"</code> / <code>data-slide="next"</code> when clicked, will slide to the next / previous carousel item; these attributes are <b>optional</b>, but the class <code>carousel-control</code> is <b>required</b>;</li>
                <li><code>class="item active"</code> / <code>class="active"</code> when <em>active</em> is present for an item or indicator, that indicates which carousel item is currently shown to the user, the above <code>.getActiveIndex()</code> method will look for it when needed.</li>
              </ul>

              <h5>Via JavaScript</h5>
              <p>The component grants full access to the internal working via JavaScript; whether via the public methods or the original events, you can do a whole bunch of things. Assuming the above markup have been injected into the DOM, let's go ahead and initialize it:</p>

<pre><code class="language-javascript">// grab the carousel element
var myCarousel = document.getElementById('myCarousel');

// initialize with some options
var myCarouselInit = new Carousel(myCarousel, { // these options values will override the ones set via DATA API
  interval: false,
  pause: false,
  keyboard: false
});
</code></pre>

              <p>And now we can play with the methods:</p>

<pre><code class="language-javascript">// use getActiveIndex()
var currentActiveItem = myCarouselInit.getActiveIndex();

// jump to a certain item
myCarouselInit.slideTo(2);

// if the carousel was set with `interval: false`
// we can do this to go to the next item
myCarouselInit.cycle();
</code></pre>

              <p>As you probably expect by now, this component also stores the initialization in the element it targets on initialization, even for instances where the DATA API was used:</p>

<pre><code class="language-javascript">// get some carousel item and reference the initialization
var mySpecialCarouselInit = document.getElementById('mySpecialCarousel').Carousel;

// apply methods
mySpecialCarouselInit.cycle();
</code></pre>

              <p>And now, instead of just writing some code sample on how to use the events, let's actually explain how the carousel at the top of this page works. With the help of the original events and some CSS, let's animate the contents of the items:</p>

<pre><code class="language-javascript">// grab the myCarousel on top of the page
var mainSlider = document.getElementById('myCarousel');

// also reference its items in an array
var mainSliderItems = mainSlider.querySelectorAll('.item');

// use the `slide.bs.carousel` event to remove the `slide` class
// FROM the div.carousel-caption of the newly activated item
mainSlider.addEventListener('slide.bs.carousel', function(e) {
  // the Carousel compoenent also stores initialization in the targeted element object
  var currentActiveIndex = mainSlider.Carousel.getActiveIndex();
  var activeCaption = mainSliderItems[currentActiveIndex].querySelector('.carousel-caption');
  activeCaption.classList.remove('slide');
});

// use the `slid.bs.carousel` event to add the `slide` class
// TO the div.carousel-caption of the newly activated item
mainSlider.addEventListener('slid.bs.carousel', function(e) {
  // e.relatedTarget is the newly activated item
  var activeCaption = e.relatedTarget.querySelector('.carousel-caption');
  activeCaption.classList.add('slide');
});
</code></pre>

              <p>To determine the slide direction, we simply access the initialization:</p>

<pre><code class="language-javascript">// read direction set by the last transition
var slideDirection = mainSlider.Carousel.direction;

// read it when `slide.bs.carousel` is triggered
mainSlider.addEventListener('slide.bs.carousel', function(e) {
  slideDirection = mainSlider.Carousel.direction;

  // now do something you need with slideDirection before transition
});

// read it when `slid.bs.carousel` is triggered
mainSlider.addEventListener('slid.bs.carousel', function(e) {
  slideDirection = mainSlider.Carousel.direction;

  // now do something you need with slideDirection after transition
});
</code></pre>

            </section>

            <section id="carouselExamples">
              <h4>Example</h4>
              <p>This is a test demonstrating the component capabilities and it's events, so open your console, and start clicking, you will be noticed before and after the animation. Also know that there was no active item set by default in the markup, proving the component can successfully manage this case by setting the first item as active on initialization.</p>
              <div class="thumbnail">
                <div id="carousel-example-generic" class="carousel slide" data-ride="carousel" data-interval="false">
                  <!-- Indicators -->
                  <ol class="carousel-indicators">
                    <!--<li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>-->
                    <li data-target="#carousel-example-generic" data-slide-to="0"></li>
                    <li data-target="#carousel-example-generic" data-slide-to="1"></li>
                    <li data-target="#carousel-example-generic" data-slide-to="2"></li>
                  </ol>
                  <!-- Wrapper for slides -->
                  <div class="carousel-inner" role="listbox">
                    <!--<div class="item active">-->
                    <div class="item">
                      <img src="https://unsplash.it/837/300?image=0" alt="">
                      <div class="carousel-caption">
                      <h3>This is another carousel</h3>
                      </div>
                    </div>
                    <div class="item">
                      <img src="https://unsplash.it/837/300?image=10" alt="">
                      <div class="carousel-caption">
                      <h3>This is a caption</h3>
                      </div>
                    </div>
                    <div class="item">
                      <img src="https://unsplash.it/837/300?image=210" alt="">
                      <div class="carousel-caption">
                      <h3>This is another caption</h3>
                      </div>
                    </div>
                  </div>

                  <!-- Controls -->
                  <a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                  </a>
                  <a class="right carousel-control" href="#carousel-example-generic" role="button" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                  </a>
                </div>
              </div>
              <div class="btn-group">
                <button class="btn btn-default"
                        onclick="document.getElementById('carousel-example-generic').Carousel.slideTo(0)">Start</button>
                <button class="btn btn-default" data-slide-to="prev"
                        onclick="document.getElementById('carousel-example-generic').Carousel.slideTo(document.getElementById('carousel-example-generic').Carousel.getActiveIndex() - 1 )">PREV</button>
                <button class="btn btn-default" data-slide-to="next"
                        onclick="document.getElementById('carousel-example-generic').Carousel.slideTo(document.getElementById('carousel-example-generic').Carousel.getActiveIndex() + 1 )">NEXT</button>
              </div>
            </section>

          </section>

          <section id="componentAffix">
            <h3>Affix</h3>
            <p>The <b>Affix</b> component has it's own options and public method, but covers all the original events of the jQuery plugin. It inherits the same basic functionality as well as the CSS requirements to make it all work properly.</p>

            <section id="affixOptions">
              <h4>Options</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped js-options-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>type</th>
                      <th>default</th>
                      <th>description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>target</code></td>
                      <td><em>selector</em><br>or<br>reference</td>
                      <td></td>
                      <td>Option to pin an element to top once the scroll reaches it's target offsetTop. You can set the target via <code>data-target=".target-className"</code> or <code>data-target="#target-ID"</code> attribute.</td>
                    </tr>
                    <tr>
                      <td><code>offsetTop</code></td>
                      <td><em>number</em><br>or<br><em>function</em></td>
                      <td></td>
                      <td>Option to pin an element to top when scroll reaches a specific value. This can be set via the <code>data-offset-top="OFFSET"</code> attribute, or via JavaScript you can assign a number or a function to the <code>offsetTop</code> option.</td>
                    </tr>
                    <tr>
                      <td><code>offsetBottom</code></td>
                      <td><em>number</em><br>or<br><em>function</em></td>
                      <td></td>
                      <td>Option to pin an element to bottom at a certain offset relative to the window maximum scroll. This can be set via the <code>data-offset-bottom="OFFSET"</code> attribute, or via JavaScript you can assign a number or a function to the <code>offsetBottom</code> option.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <p>Using static values for <code>offsetTop</code> and / or <code>offsetBottom</code> would work best on non-responsive websites, or when the elements don't change their height when window resize occurs.</p>
            </section>

            <section id="affixMethods">
              <h4>Methods</h4>
              <div class="list-group">
                <div class="list-group-item">
                  <h4 class="list-group-item-heading">.update()</h4>
                  <p class="list-group-item-text">When DOM layout changes occured without triggering a resize in your context, you will have this option to immediately update the affix status of your element.</p>
                </div>
              </div>
            </section>

            <section id="affixEvents">
              <h4>Events</h4>
              <div class="table-responsive">
                <table class="table table-bordered table-striped bs-events-table">
                  <thead>
                    <tr>
                      <th>Event Type</th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><code>affix.bs.affix</code></td>
                      <td>This event fires immediately before the element has been affixed.</td>
                    </tr>
                    <tr>
                      <td><code>affixed.bs.affix</code></td>
                      <td>This event is fired after the element has been affixed.</td>
                    </tr>
                    <tr>
                      <td><code>affix-top.bs.affix</code></td>
                      <td>This event fires immediately before the element has been affixed-top.</td>
                    </tr>
                    <tr>
                      <td><code>affixed-top.bs.affix</code></td>
                      <td>This event is fired after the element has been affixed-top.</td>
                    </tr>
                    <tr>
                      <td><code>affix-bottom.bs.affix</code></td>
                      <td>This event fires immediately before the element has been affixed-bottom.</td>
                    </tr>
                    <tr>
                      <td><code>affixed-bottom.bs.affix</code></td>
                      <td>This event is fired after the element has been affixed-bottom.</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </section>

            <section id="affixUsage">
              <h4>Usage</h4>
              <h5>Required CSS</h5>
              <p>First we need to make sure our element is properly styled to make sure it works properly. For instance this is the style we needed for the navigation on the right side to make it work:</p>

<pre><code class="language-css">/* this style applies to mobile devices, on screens SMALLER than 768px */
#side-nav {clear: both}
#side-nav .nav.affix,
#side-nav .nav.affix-bottom { position: relative; margin: 20px 0; } /* relative position recommended */

/* this style applies to other devices, on screens LARGER than 768px */
@media (min-width: 768px) {
  #side-nav .nav.affix, /* the fixed position and a width are required */
  #side-nav .nav.affix-bottom { position: fixed !important; width: 263px; }
  #side-nav .nav.affix { top: 0; }  /* affixedTop position */
  #side-nav .nav.affix-bottom { top: auto; bottom: 100px; }  /* affixedBottom position */
}
</code></pre>

              <p>In addition, via JavaScript you can ask the browser to update the value of <code>width: 263px;</code> on window resize.</p>

              <h5>Via DATA API</h5>
              <p>Alright, we put the styling out of the way, we'll have a look at our example here on this very page. So we configure an element to be pinned to top targeting a certain element's position and a bottom offset of around 120px.</p>

<pre><code class="language-markup">&lt;ul id="myAffix" class="nav nav-stacked" data-spy="affix" data-target="#use" data-offset-bottom="120"&gt;
  &lt;!-- menu items --&gt;
&lt;/ul&gt;
</code></pre>
              <p>If everything is set properly you should be able to achieve the same exact effect.</p>

              <h5>Via JavaScript</h5>
              <p>Assuming the above element has been injected into the page, you can initialize it via JavaScript:</p>

<pre><code class="language-javascript">// grab the element by it's ID
var myAffix = document.getElementById('myAffix');

// initialize
var theAffixInit = new Affix(myAffix, {
  target: '#use',
  offsetBottom: 120,
});

// use the public method any time you see fit
theAffixInit.update();
</code></pre>

              <p>Also via JavaScript we can set offset options as functions:</p>

<pre><code class="language-javascript">// grab the element by it's ID
var myAffix = document.getElementById('myAffix');

// initialize with some cool options
var theAffixInit = new Affix(myAffix, {
  offsetTop: function() {
    var rectTop = document.getElementById('use').getBoundingClientRect().top;
    var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    return rectTop + scrollTop;
  },
  offsetBottom: function() {
    var reasonableMargin = 20;
    var elementHeight = myAffix.offsetHeight;
    var footerHeight = document.getElementsByTagName('footer')[0].offsetHeight;
    var maxScroll = Math.max(
        document.body.scrollHeight,
        document.body.offsetHeight,
        document.documentElemnt.clientHeight,
        document.documentElement.scrollHeight,
        document.documentElement.offsetHeight );
    return maxScroll - elementHeight - footerHeight - reasonableMargin;
  },
});
</code></pre>

              <p>Now let's make use of some of the component's original events:</p>

<pre><code class="language-javascript">// affix.bs.affix
myAffix.addEventListener('affix.bs.affix', function(event){
  // do something when myAffix is about to be affixed top or bottom
  // event.target is myAffix
}, false);

// affixed-top.bs.affix
myAffix.addEventListener('affixed-top.bs.affix', function(event){
  // do something when myAffix is affixed top
  // event.target is myAffix
}, false);

// and so on
</code></pre>
              <p>If your element have been initialized by the component via DATA API, you can still access the initialization object:</p>

<pre><code class="language-javascript">// grab the element by it's ID
var myAffix = document.getElementById('myAffix');

// reference the initialization
var theAffixInit = myAffix.Affix;

// use the public method
theAffixInit.update();
</code></pre>

            </section>

            <section id="affixExamples">
              <h4>Example</h4>
              <p>We don't have a working example for this component in this section, due to the complexity and requirements, however the navigation on the right side of this page is a good example, it covers initialization via DATA API, the required styling and the original events. </p>

            </section>
          </section>

        </section>
      </div>

      <div id="side-nav" class="col-sm-3 hidden-xs">
        <h3 class="visible-xs">Navigation</h3>
        <ul id="nav-scrollspy" class="nav nav-stacked" data-spy="affix" data-target="#use" data-offset-bottom="120">
          <li><a href="#myCarousel">Download</a></li>
          <li class=""><a href="#use">Read First</a></li>
          <li class="list11">
            <a href="#components">Components</a>
            <ul class="nav nav-stacked">
              <li class="list5">
                <a href="#componentModal">Modal</a>
                <ul class="nav nav-stacked">
                  <li><a href="#modalOptions">Options</a></li>
                  <li><a href="#modalMethods">Methods</a></li>
                  <li><a href="#modalEvents">Events</a></li>
                  <li><a href="#modalUsage">Usage</a></li>
                  <li><a href="#modalExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentDropdown">Dropdown</a>
                <ul class="nav nav-stacked">
                  <li><a href="#dropdownOptions">Options</a></li>
                  <li><a href="#dropdownMethods">Methods</a></li>
                  <li><a href="#dropdownEvents">Events</a></li>
                  <li><a href="#dropdownUsage">Usage</a></li>
                  <li><a href="#dropdownExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentScrollspy">ScrollSpy</a>
                <ul class="nav nav-stacked">
                  <li><a href="#scrollspyOptions">Options</a></li>
                  <li><a href="#scrollspyMethods">Methods</a></li>
                  <li><a href="#scrollspyEvents">Events</a></li>
                  <li><a href="#scrollspyUsage">Usage</a></li>
                  <li><a href="#scrollspyExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentTab">Tab</a>
                <ul class="nav nav-stacked">
                  <li><a href="#tabOptions">Options</a></li>
                  <li><a href="#tabMethods">Methods</a></li>
                  <li><a href="#tabEvents">Events</a></li>
                  <li><a href="#tabUsage">Usage</a></li>
                  <li><a href="#tabExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentTooltip">Tooltip</a>
                <ul class="nav nav-stacked">
                  <li><a href="#tooltipOptions">Options</a></li>
                  <li><a href="#tooltipMethods">Methods</a></li>
                  <li><a href="#tooltipEvents">Events</a></li>
                  <li><a href="#tooltipUsage">Usage</a></li>
                  <li><a href="#tooltipExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentPopover">Popover</a>
                <ul class="nav nav-stacked">
                  <li><a href="#popoverOptions">Options</a></li>
                  <li><a href="#popoverMethods">Methods</a></li>
                  <li><a href="#popoverEvents">Events</a></li>
                  <li><a href="#popoverUsage">Usage</a></li>
                  <li><a href="#popoverExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentAlert">Alert</a>
                <ul class="nav nav-stacked">
                  <li><a href="#alertOptions">Options</a></li>
                  <li><a href="#alertMethods">Methods</a></li>
                  <li><a href="#alertEvents">Events</a></li>
                  <li><a href="#alertUsage">Usage</a></li>
                  <li><a href="#alertExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentButton">Button</a>
                <ul class="nav nav-stacked">
                  <li><a href="#buttonOptions">Options</a></li>
                  <li><a href="#buttonMethods">Methods</a></li>
                  <li><a href="#buttonEvents">Events</a></li>
                  <li><a href="#buttonUsage">Usage</a></li>
                  <li><a href="#buttonExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentCollapse">Collapse</a>
                <ul class="nav nav-stacked">
                  <li><a href="#collapseOptions">Options</a></li>
                  <li><a href="#collapseMethods">Methods</a></li>
                  <li><a href="#collapseEvents">Events</a></li>
                  <li><a href="#collapseUsage">Usage</a></li>
                  <li><a href="#collapseExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentCarousel">Carousel</a>
                <ul class="nav nav-stacked">
                  <li><a href="#carouselOptions">Options</a></li>
                  <li><a href="#carouselMethods">Methods</a></li>
                  <li><a href="#carouselEvents">Events</a></li>
                  <li><a href="#carouselUsage">Usage</a></li>
                  <li><a href="#carouselExamples">Examples</a></li>
                </ul>
              </li>
              <li class="list5">
                <a href="#componentAffix">Affix</a>
                <ul class="nav nav-stacked">
                  <li><a href="#affixOptions">Options</a></li>
                  <li><a href="#affixMethods">Methods</a></li>
                  <li><a href="#affixEvents">Events</a></li>
                  <li><a href="#affixUsage">Usage</a></li>
                  <li><a href="#affixExamples">Examples</a></li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </div>
    </div>
  </div>

  <footer>
    <div class="container">
      <p class="pull-right"><a href="#myCarousel">Back to top</a></p>
      <p><a href="http://themeforest.net/user/dnp_theme" rel="noreferrer" target="_blank">dnp_theme</a> &copy; 2015-2019.</p>
     </div>
  </footer>

    {% if app.environment != 'dev' %}
      <script type="text/javascript" src="{{ cdn_s3 }}/js/bootstrap-native.js"></script>
    {% else %}
      <script type="text/javascript" src="/js/bootstrap-native.js"></script>
    {% endif %}
    <script type="text/javascript" src="/js/base.js"></script>

    {% block javascripts %}{% endblock %}
  </body>
</html>
