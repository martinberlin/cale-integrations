{% extends '/base.html.twig' %}
{% set carousel_high = 110 %}

{% block stylesheets %}
    <style>
        #myCarousel.carousel {
            height: {{ carousel_high }}px;
        }
        #myCarousel .item {
            height: {{ carousel_high }}px; width: 100%;
            background-color: #333;
        }
        body {
            background-color: #e0e0e0;
            color:black;
        }
    </style>
{% endblock stylesheets %}

{% block carousel %}
    {% include "/partials/carousel.html.twig" %}
{% endblock carousel %}

{% block body %}

    <h3>Firmware für TFT-Displays (nur ESP32)</h3>

    <div class="panel panel-default" style="margin-top: 1em">
                <div class="panel-heading">Quick access:</div>
                <div class="panel-body">
    <ul>
        <li><a href="{{ path('firmware-blue') }}">Firmware mit Bluetooth</a></li>
        <li><a href="{{ path('firmware-t5') }}">TTGO T5 Firmware mit 3 Screens</a></li>
        <li><a href="#a1">C++ Repository - cale-tft branch</a></li>
        <li><a href="#a2">Config referenz</a></li>
        <li><a href="#a3">Die richtige library für ihre TFT-Display Modell auswählen</a></li>
    </ul>

    </div></div>

    <p>
    <b>Unsere Hauptziel ist mit <span class="cale" style="font-weight:bold">CALE Web-Service</span>
        eine Epaper Firmware zu verfügung stellen.</b> Die TFT-Display Firmware gilt als
        Beispiel von pull-request von eine JPG Bildern mit ESP32 damit Sie könnten seine eigene Lösung entwicklen.<br>
        Diese Beispiele macht nur 3 Sachen:<br>

        <ul>
    <li><b>Bietet eine Möglichkeit, ein JPG Binärbild von einer externen URL in ESP32 herunterladen</b></li>
    <li><b>Ein Interpreter, der diese jpg Bild liest </b> und einen Puffer für die Anzeige vorbereitet (based on JPEGDecoder lib)</li>
    <li><b>Ein Autorisierungstoken</b> damit die Screens bleiben privat und nicht Public in Internet (Bearer token)</li>
    </ul>


    <br>Die Open Source Firmware ist hier:<br>

    <h4><a href="https://github.com/martinberlin/eink-calendar/tree/cale_tft">https://github.com/martinberlin/eink-calendar</a> - cale_tft branch</h4>
    </p>

    <a name="a1"></a><br><br><br><br>
    <h4>So kompilieren und laden Sie auf Ihr Board</h4>

    <p>Wir gehen davon aus, dass Sie mit der Installation von
        <a href="https://fasani.de/2018/11/24/platformio-an-alternative-to-arduino-ide-and-a-complete-ecosystem-for-iot/">
            Platformio vertraut sind</a>, einer großartigen IDE zum Hochladen von Firmware auf Ihre Boards und zum Beibehalten
        Ihrer Abhängigkeiten in Ihrem Projekt.
        <br><br>
        Die Konfiguration ist nicht kompliziert. Nach dem Download einfach umbenennen:<br>
        lib/Config/Config.h.dist zu <br>
        Config.h<br><br>

        und füllen Sie es mit Ihrem WiFi-Namen und Passwort.<br>
    </p>

         Der wichtigste Teil der Konfiguration besteht darin, die Bild-URL aus dem Abschnitt "Renderbildschirm" von CALE in die Konfiguration zu kopieren.
         Klicken Sie einfach auf die <b> Bitmap-URL für den ESP32 </ b>, um alle auszuwählen, kopieren Sie sie in die screenUrl und machen Sie dasselbe mit dem <b> Bearer-Token </b>,
    wenn Sie einen privaten Bildschirm verwenden:<br>

<pre>
    // Keep in mind this screens need a JPG image response so make sure to select a TFT display in CALE.es
    char screenUrl[] = "http://img.cale.es/jpg/USERNAME/SCREEN_ID";

    // Security setting, leave empty *only* if your screen is public (Not recommended)
    String bearer = "";
</pre>

    <a name="a2"></a><br><br><br><br>
    <h5><b>Protokollierung der internen ESP32-IP-Adresse</b></h5>
         Standardmäßig protokolliert CALE die interne IP-Adresse, da dies für Statistiken und zum Identifizieren Ihrer
    Geräteimage-Anforderungen anhand der Administrations-Image-Anforderungen hilfreich sein kann.
    Wenn Sie dies aus irgendeinem Grund deaktivieren möchten, kommentieren Sie einfach diese Zeile in der Konfigurationsdatei:
    <pre>
#define ENABLE_INTERNAL_IP_LOG
</pre>

    <a name="a3"></a><br><br><br>
    <h5><b>Auswahl des richtigen Treibers für Ihr Display</b></h5>

    Um den richtigen Treiber für die von Ihnen verwendete Anzeige auszuwählen, sollten Sie sich zunächst mit der Bodmer TFT_SPI-Bibliothek vertraut machen
         und um Beschreibungen und Beispiele zu durchsuchen. Ich erwähne das, da nicht alle TFTs die gleichen Pins benötigen und sie ausreichen
         Beispiele, aber ich kann nicht alle Konfigurationen abdecken, da ich nicht alle Anzeigen zum Testen habe. <br>
         Bitte überprüfen Sie die
    <a href="https://github.com/Bodmer/TFT_eSPI/tree/master/TFT_Drivers" target="_blank">Bodmer TFT drivers Liste</a>
    und auswahlen die richtige TFT-Driver.
    Hier eine Beispiel Konfiguration mit ILI9341_DRIVER


    <h4><b>GPIOs for the TFT SPI interface</b></h4>
    Für diese Firmware haben wir sowohl den Anzeigetreiber als auch die SPI-Pins-Konfiguration mit build_flags durchgeführt
         Plattformio.ini-Datei:<br>
    <pre>
    ; DISPLAY_ROTATION: 0 & 2 Portrait. 1 & 3 landscape
build_flags =
  -DUSER_SETUP_LOADED=1
  -DILI9341_DRIVER=1
  -DTFT_WIDTH=240
  -DTFT_HEIGHT=320
  -DTFT_MOSI=23
  -DTFT_SCLK=18
  -DTFT_CS=32
  -DTFT_DC=27
  -DTFT_RST=5
  -DSPI_FREQUENCY=40000000
  -DDISPLAY_ROTATION=1
    </pre>
    Beachten Sie bitte, dass USER_SETUP_LOADED die Bodmer TFT-Bibliothek anweist, diese Konfiguration zu verwenden und keine dateibasierte.
{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="/js/engine/common.js"></script>
{% endblock %}