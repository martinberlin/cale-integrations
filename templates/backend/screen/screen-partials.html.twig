{% extends 'backend/backend-base.html.twig' %}

{% block stylesheets %}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/nano.min.css"/>
{% endblock %}

{% macro rowPrototype(form) %}
    <div class="item row" style="margin:0.4em;padding:0.4em;border: 1px solid #2d545e">
       <div class="col-md-12 col-sm-12 col-xs-12">
           <div class="row">
               <div class="col-md-4 col-sm-6 col-xs-12">
                   {{ form_row(form.partials.vars.prototype.integrationApi) }}
                   <div class="row">
                       <div class="col-md-2 col-sm-2 col-xs-2">
                           {{ form_label(form.partials.vars.prototype.maxResults) }}
                       </div>
                       <div class="col-md-2 col-sm-2 col-xs-2">
                           {{ form_widget(form.partials.vars.prototype.maxResults) }}
                       </div>
                       <div class="col-md-2 col-sm-1 col-xs-2">
                           {{ form_label(form.partials.vars.prototype.sortPos) }}
                       </div>
                       <div class="col-md-2 col-sm-1 col-xs-2">
                           {{ form_widget(form.partials.vars.prototype.sortPos) }}
                       </div>
                   </div>
               </div>
               <div class="col-md-2 col-sm-6 col-xs-12">
                   {{ form_row(form.partials.vars.prototype.placeholder) }}
                   {{ form_widget(form.partials.vars.prototype.invertedColor) }}
                   {{ form_label(form.partials.vars.prototype.invertedColor) }}
               </div>
               <div class="col-md-2 col-sm-6 col-xs-6">
                   {{ form_row(form.partials.vars.prototype.foregroundColor, {'attr': {'value': '#000000'}}) }}
               </div>
               <div class="col-md-2 col-sm-6 col-xs-6">
                   {{ form_row(form.partials.vars.prototype.backgroundColor, {'attr': {'value': '#FFFFFF'}}) }}
               </div>

               <div class="col-md-2 col-sm-6 col-xs-6">
                   <button type="button" style="margin-top: 2.2em"
                           class="delete_item btn btn-danger btn-sm">{{'Delete'|trans}}</button>
               </div>
           </div>
       </div>
   </div>
{% endmacro %}


{% block body %}
<div class="row">
    <div class="col-md-8 col-sm-6" data-step="4" data-intro="{{ 'screen_partials_edit_line2'|trans }}. {{ 'screen_partials_edit_line3'|trans }}">
<p>
    <b>{{ 'screen_partials_edit_line1'|trans }}</b>

    {% if form.partials|length == 0 %}
        <br>Start adding your first content partial for this Screen with the <span class="glyphicon glyphicon-plus"></span> button below.
    {% endif %}
</p>
    </div>
    <div class="col-md-4 col-sm-6">
        <div class="row">
        <div class="col-md-9 col-sm-6">
<a href="{{ path('b_screen_edit', {'uuid':uuid}) }}">{{ 'screen_edit_config'|trans }}</a>
        </div>
        <div class="col-md-3 col-sm-6 text-right">
            <img id="template" width="100" style="margin-top: -1em;padding-right: 1em"
                 src="/img/display-templates/{{ template_twig }}.svg">
         </div>
         </div>
    </div>
</div>
{{ form_start(form) }}
{{ form_errors(form) }}

    <div class="collection_container">
        <div class="row">
            <div class="col-md-3 col-sm-6">
              <button type="button" class="add_item btn btn-default" data-step="5"
                      data-intro="{{ 'screen_help_5'|trans }}">
                  <span class="glyphicon glyphicon-plus"></span> {{ 'screen_add_partial'|trans }}</button>
             </div>
            <div class="col-md-3 col-sm-6">
            {{ form_widget(form.submit, {'attr': {'data-step': '6', 'data-intro': 'screen_help_6'|trans }}) }}
            </div>
            <div class="col-md-2 col-sm-6">
                {% if form.partials|length %}
                <button type="button" class="btn btn-success"
                onclick="window.location='{{ path('b_screen_render', {'uuid':uuid}) }}'">
                    {{'screen_render'|trans}}</button>
                {% endif %}
            </div>
            <div class="col-md-2 col-sm-12">
            <button type="button" class="btn btn-default" onclick="introJs().start().goToStep(4)">
                <span class="glyphicon glyphicon-question-sign"></span></button>
            </div>
            <div class="col-md-2 col-sm-12 text-right">
                {% if form.partials|length %}

                    {% if screen_public %}
                        <img src="{{ thumbnail_src }}">
                    {% else %}
                        <img src="{{ path('b_render_image', {'uuid':uuid, 'isThumbnail':1}) }}">
                    {% endif %}

                {% endif %}
            </div>
        </div>
<br>


        {% if form.partials|length %}
        <label>{{'screen_partials'|trans}}.</label> &nbsp;
        {% endif %}
        <b>Template:</b> {{ template_twig }}
        {% if display is not null %}
            {{ display.width }}x{{ display.height }} <b>Class:</b> {{ display.className }}
        {% endif %}

        {# {{ form_widget(form.partials.vars.prototype)|e('html_attr') }} #}
        <div class="collection_holder row"
             data-prototype="{{ _self.rowPrototype(form)|e }}">


            {# Iterate over each existing partials #}
            {% for partial in form.partials %}
                <div class="item row" style="margin:0.4em;padding:0.4em;border: 1px solid #2d545e">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="row">
                            <div class="col-md-4 col-sm-6 col-xs-12">
                                {{ form_row(partial.integrationApi) }}
                                <div class="row">
                                    {{ form_errors(partial.sortPos) }}
                                    {{ form_errors(partial.maxResults) }}
                                <div class="col-md-2 col-sm-2 col-xs-2">
                                    {{ form_label(partial.maxResults) }}
                                </div>
                                <div class="col-md-2 col-sm-2 col-xs-2">
                                    {{ form_widget(partial.maxResults) }}
                                </div>
                                <div class="col-md-2 col-sm-1 col-xs-2">
                                    {{ form_label(partial.sortPos) }}
                                </div>
                                <div class="col-md-2 col-sm-1 col-xs-2">
                                    {{ form_widget(partial.sortPos) }}
                                </div>
                                </div>
                            </div>
                            <div class="col-md-2 col-sm-6 col-xs-12">
                                {{ form_row(partial.placeholder) }}
                                {{ form_widget(partial.invertedColor) }}
                                {{ form_label(partial.invertedColor) }}
                            </div>
                            <div class="col-md-2 col-sm-6 col-xs-6">
                                {{ form_row(partial.backgroundColor) }}
                            </div>
                            <div class="col-md-2 col-sm-6 col-xs-6">
                                {{ form_row(partial.foregroundColor) }}
                            </div>
                            <div class="col-md-2 col-sm-6 col-xs-6">
                                <button type="button" style="margin-top: 2.2em"
                                        class="delete_item btn btn-danger btn-sm">{{'Delete'|trans}}</button><br>
                                <img src="" id="t_{{ loop.index0 }}">
                            </div>
                        </div>

                    </div>
                </div>
            {% endfor %}


        </div>
    </div>

{{ form_end(form) }}


{% endblock %}


{% block javascripts %}
{# TODO: Get rid of jquery since we are only using it here for handling the frontend part of Symfony collections #}
<script src="https://code.jquery.com/jquery-2.1.0.min.js"></script>
<script src="/js/engine/collection.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        drawPickers();
    });

        function drawPickers() {
        document.querySelectorAll('.pickr').forEach(function (picker) {

            {#
            let defaultColor = (colorSwitch) ? '{{ defaultBColor }}' : '{{ defaultFColor }}';
            colorSwitch = !colorSwitch;
            #}

            let pickr = Pickr.create({
                el: picker,
                theme: 'nano',
                useAsButton: true,
                swatches: [
                    'rgb(0, 0, 0)',
                    'rgb(30, 30, 30)',
                    'rgb(50, 50, 50)',
                    'rgb(70, 70, 70)',
                    'rgb(90, 90, 90)',
                    'rgb(130, 130, 130)',
                    'rgb(160, 160, 160)',
                    'rgb(255, 255, 255)',
                    'rgb(63, 81, 181)',
                    'rgb(3, 169, 244)',
                    'rgb(0, 150, 136)',
                    'rgb(76, 175, 80)',
                    'rgb(205, 220, 57)',
                    'rgb(225, 123, 7)',
                    'rgb(255, 255, 255)',
                    'rgb(244, 167, 0)',
                    'rgb(244, 67, 54)',
                    'rgb(233, 30, 99)',
                    'rgb(156, 39, 176)',
                    'rgb(232, 64, 170)',
                    'rgb(255, 113, 181)',
                ],
                defaultRepresentation: 'HEX',
                components: {
                    // Main components
                    preview: true,
                    opacity: false,
                    hue: false,
                    interaction: {
                        hex: true,
                        rgba: false,
                        hsva: false,
                        input: true,
                        save: false
                    }
                }
            }).on('init', pickr => {
                let el = pickr._root.button;
                pickr.setColor(el.value);
            }).on('change', color => {
                let el = pickr._root.button;
                el.value = color.toHEXA().toString();
                el.style.backgroundColor = color.toHEXA();
            });
        });
    }
</script>
{% endblock javascripts %}