{% extends 'backend/backend-base.html.twig' %}

{# Datatables include let's make this one line #}
{% block stylesheets %}
    <link href="/js/datatables/datatables.min.css" rel="stylesheet">
    <script type="text/javascript" src="/js/datatables/datatables.min.js"></script>
    <script type="text/javascript" src="/js/datatables/Bootstrap-3.3.7/bootstrap.min.js"></script>
{% endblock %}


{% block body %}
    <div class="row">

        <div class="col-md-6">
            <ul>

                <li>
                    <h4>
                        Step 1 <a href="{{ path('b_api_configure') }}">Configure your APIs</a>
                    </h4>
                </li>

                <li>
                    <h4>
                        Step 2 <a href="{{ path('b_screens') }}">Setup Screens and content partials</a>
                    </h4>
                </li>

                <li>
                    <h4>
                        Step 3 Preview your screens with your content
                    </h4>
                </li>

                <li>
                    <h4>
                        Step 4 Get an image link that you can use on your connected devices (Coming soon at launch day)
                    </h4>
                </li>
            </ul>
            <p>Click here if you want to understand the sections of the admin for a small on-boarding tour:</p>
            <button class="btn btn-default" onclick="introJs().start();">
                <span class="glyphicon glyphicon-question-sign"></span> Give me an Admin-tour</button>

            <div class="row" style="height: 40px"></div>

            <p>This admin dashboard part is still in development. The idea is to make a full control panel where you can:</p>
            <ul>
                <li>Preview your screens - DONE</li>
                <li>See statistics and logs to check that your displays are being updated correctly</li>
                <li>Documentation content about how to install the Firmware and to test it with the Screens generated here</li>
                <li>Quick access to support in case you need help</li>
            </ul>
        </div>

        <div class="col-md-6">
        <table id="demotable" class="table table-striped table-condensed dataTable">
            <thead><tr></tr></thead>
        </table>
        </div>

    </div>
{% endblock %}
{% block javascripts %}
    <script>
    document.addEventListener("DOMContentLoaded", function() {
        introJs().setOption("overlayOpacity", 0.1);
    });

    var data,
        tableName= '#demotable',
        columns,
        str,
        jqxhr = $.ajax('/js/datatables/data.json')
            .done(function () {
                data = JSON.parse(jqxhr.responseText);

                // Iterate each column and print table headers for Datatables
                $.each(data.columns, function (k, colObj) {
                    str = '<th>' + colObj.name + '</th>';
                    $(str).appendTo(tableName+'>thead>tr');
                });

                // Add some Render transformations to Columns
                // Not a good practice to add any of this in API/ Json side
                data.columns[0].render = function (data, type, row) {
                    return '<h4>' + data + '</h4>';
                }
                // Debug? console.log(data.columns[0]);

                $(tableName).dataTable({
                    "data": data.data,
                    "columns": data.columns,
                    "fnInitComplete": function () {
                        // Event handler to be fired when rendering is complete (Turn off Loading gif for example)
                        console.log('Datatable rendering complete');
                    }
                });
            })
            .fail(function (jqXHR, exception) {
                var msg = '';
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (jqXHR.status == 404) {
                    msg = 'Requested page not found. [404]';
                } else if (jqXHR.status == 500) {
                    msg = 'Internal Server Error [500].';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else if (exception === 'timeout') {
                    msg = 'Time out error.';
                } else if (exception === 'abort') {
                    msg = 'Ajax request aborted.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
                console.log(msg);
            });

    </script>
{% endblock %}
