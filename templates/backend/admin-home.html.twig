{% extends 'backend/backend-base.html.twig' %}

{# Datatables include let's make this one line #}
{% block stylesheets %}
    <link href="/js/datatables/datatables.min.css" rel="stylesheet">
    <script src="/js/jquery/jquery-2.1.0.min.js"></script>
    <script type="text/javascript" src="/js/datatables/datatables.min.js"></script>
{% endblock %}

{% block body %}
    <div class="row">

        <div class="col-md-5">
            <p>Click here if you want to understand the sections of the admin for a small on-boarding tour:</p>
            <button class="btn btn-default" onclick="introJs().start();">
                <span class="glyphicon glyphicon-question-sign"></span> Give me an Admin-tour</button>

            <ul>
                <li>
                    <h4>
                        Step 1 <a href="{{ path('b_api_configure') }}">Configure your APIs</a>
                    </h4>
                </li>

                <li>
                    <h4>
                        Step 2 <a href="{{ path('b_screens') }}">Setup Screens and content partials</a>
                    </h4>
                </li>

                <li>
                    <h4>
                        Step 3 Preview your screens with your content and get an image link that you can use on your connected devices
                    </h4>
                </li>
            </ul>


        </div>

        <div class="col-md-7">
            <h4>Screen log</h4>
        {% if (hasScreen) %}
        <table id="screen_log" class="table table-striped table-condensed dataTable">
            <thead><tr></tr></thead>
        </table>
            {% else %}
            {{ 'no_screen_logs_yet'|trans }}
        {% endif %}
        </div>

    </div>
{% endblock %}
{% block javascripts %}
    <script>
    document.addEventListener("DOMContentLoaded", function() {
        introJs().setOption("overlayOpacity", 0.1);
    });
    //Returns true if it is a DOM element
    function isElement(o){
        return (
                typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
                o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName==="string"
        );
    }

    screenLogTable = 'screen_log';

    if (isElement(document.getElementById(screenLogTable))) {
    // datatables wants the tablename in jquery notation
    var data,tableName= '#'+screenLogTable,columns,str,
        jqxhr = $.ajax('{{ path('b_json_datatables', {'type': 'screen_log'}) }}')
            .done(function () {
                data = JSON.parse(jqxhr.responseText);

                // Iterate each column and print table headers for Datatables
                $.each(data.columns, function (k, colObj) {
                    str = '<th>' + colObj.n + '</th>';
                    $(str).appendTo(tableName+'>thead>tr');
                });

                // Add some Render transformations to Columns
                /*data.columns[0].render = function (data, type, row) {
                    return '<h4>' + data + '</h4>';
                };*/

                $(tableName).dataTable({
                    "data": data.data,
                    "columns": data.columns,
                    "fnInitComplete": function () {
                        // Event handler to be fired when rendering is complete (Turn off Loading gif for example)
                        console.log('Datatable rendering complete');
                    }
                });
            })
            .fail(function (jqXHR, exception) {
                var msg = '';
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
                console.log(msg);
            });
    }

    </script>

{% endblock %}
