{% extends '/base.html.twig' %}
{% set bmp_800_demo = 'http://img.cale.es/bmp/cale_www/5f927722b40d9' %}

{% block carousel %}
    {% include "/partials/carousel.html.twig" %}
{% endblock carousel %}

{% block body %}
    <div class="text-center" style="margin-top: -2em">
    <h3><span class="cale">API Mashup creator for your WiFi displays</span></h3>
    <h4>
        <span class="cale" style="font-weight:bold">CALE</span> is a screen administrator where you can mix the content of different APIs
            and control the output.
    </h4>

        {% if app.environment != 'dev' %}
        <video id="index" title="Video: Convert your Screen into an Eink" width="100%" controls autoplay>
            <source src="{{ cdn_s3 }}/v/c-converts-your-screens.mov">
        </video>
        {% endif %}

    </div>
    <h5>You can use it on any <b>WiFi display</b> like your tablet, mobile, or ultimately in a
        WiFi E-Paper screen that is every hour fetching new content at minimum consumption.
    </h5>

    <div class="row">
            <div class="col-md-2"></div>
        <div class="col-md-4 col-sm-6 col-xs-12 text-center">
            <button type="button" class="btn btn-primary form-control" onclick="window.location='{{ path('login') }}'">
                Login</button>
        </div>
        <div class="col-md-4 col-sm-6 col-xs-12 text-center">
        <button type="button" class="btn btn-success form-control" onclick="window.location='{{ path('register') }}'">
            Create an account</button>
        </div>
            <div class="col-md-2"></div>
    </div>

    <br><br>
    <div class="row">
    <div class="col-md-12">
        <h3>API integration example with Ethereum balance and Cloudwatch monitoring</h3>


        <h4>800*480 pixels bitmap demo for an <a href="{{ path('displays-eink') }}">Epaper WiFi display</a></h4>
        <img src="{{ bmp_800_demo}}" style="border:1px solid gray;margin-left:1px" width="98%"><br>
        <small>7.5 inches Epaper display, 1 or 3 colors</small>

        <a href="https://play.google.com/store/apps/details?id=io.cordova.cale" target="_blank" title="CALE Android application">
            <img src="/assets/www/firmware/cale_app_1.jpg" style="margin-top:1.6em;margin-right:19px" alt="CALE Android app" class="pull-right"></a>
        <p style="margin-top:2em">
            <h4><a href="{{ path('firmware-blue') }}">Our Firmware</a> is compatible with ESP32 / ESP8266 Espressif boards and it's ready to be configured with
            <span class="cale" style="font-weight:bold">CALE Android Application</span></h4>
        <br>
        Both the Firmware and the Android application are fully open source.
        Enabling you to have full control of what is going on between your application and the display controller.
        You can even fork it and customize it for your own project or use our working examples in your own Firmware implementation.<br><br>

        <b>To sync your App to our web-service just create an account and follow this steps:</b><br><br>
        <ol>
            <li><a href="https://play.google.com/store/apps/details?id=io.cordova.cale" target="_blank">
                    Download <span class="cale" style="font-weight:bold">CALE Android App</span></a></li>
            <li>Configure a test Screen, associated to an Eink display, and one WiFi access point</li>
            <li>Activate Bluetooth in your Android device and log in to <span class="cale" style="font-weight:bold">CALE BACKEND</span></li>
            <li>Scan the QR Code you can see on <b>User <span class="glyphicon glyphicon-arrow-right"></span> My api QR code</b></li>
            <li>Select the Screen you created previously, choose the ESP32 Bluetooth target, and send the configuration using Bluetooth</li>
        </ol>
        After the Espressif board receives his WiFi AP gets online and downloads the Screen image.
        It should refresh the Epaper display and go to sleep,
        remaining in low consumption mode, till next wake up.<br><br>
        At this point you have a low energy display that is connected to <span class="cale" style="font-weight:bold">CALE BACKEND</span>
        so you can change any part of the Screen, and in next refresh the Epaper display
        will read the new image.
        </p>
    </div>
    </div>

{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="/js/engine/common.js"></script>
    <script type="text/javascript" src="/js/tracking/analytics-html5-video.js"></script>
    <script>
        var videoId = document.getElementById('index')
        if (videoId) {
            document.addEventListener('DOMContentLoaded', init, false)
            var videoTitle = videoId.getAttribute('title')
        }
    </script>
{% endblock %}