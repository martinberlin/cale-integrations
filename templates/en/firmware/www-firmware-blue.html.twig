{% extends '/base.html.twig' %}
{% set cale_android = 'https://play.google.com/store/apps/details?id=io.cordova.cale' %}
{% set cale_android_apk = 'https://github.com/martinberlin/cale-app/tree/master/releases' %}
{% set carousel_high = 110 %}

{% block stylesheets %}
    <style>
        #myCarousel.carousel {
            height: {{ carousel_high }}px;
        }
        #myCarousel .item {
            height: {{ carousel_high }}px; width: 100%;
            background-color: #333;
        }
        body {
            background-color: #e0e0e0;
            color:black;
        }
    </style>
    {# Datatables include let's make this one line #}
        <link href="/js/datatables/datatables.css" rel="stylesheet">
        <script src="/js/jquery/jquery-2.1.0.min.js"></script>
        <script type="text/javascript" src="/js/datatables/datatables.min.js"></script>
{% endblock stylesheets %}

{% block carousel %}
    {% include "/partials/carousel.html.twig" %}
{% endblock carousel %}

{% block body %}

    <h3>Configuring the Firmware using Bluetooth for ESP32</h3>

    <div class="row">
        <div class="col-md-7">
    <div class="panel panel-default" style="margin-top: 1em">
                <div class="panel-heading">Quick access:</div>
                <div class="panel-body">
    <ul>
        <li><a href="#a1">Quick start with Bluetooth</a></li>
        <li><a href="#repo">C++ Repository - cale_ble</a></li>
        <li><a href="#a2">Config reference</a></li>
        <li><a href="#a3">Android application</a></li>
        <li><a href="{{ path('firmware-tft') }}">Firmware for TFT displays</a></li>
        <li><a href="{{ path('firmware') }}">Firmware and schematics without Bluetooth (ESP8266 / ESP32)</a></li>
    </ul>

    </div></div>
            <a id="a1"></a><br>
            <p style="margin-top:4em">
                We are currently in the process of reshaping and making the Firmware configuration easier.
                The Android app is now oficially the default way to set up your display.
                But we will always keep the possibility to have also a
                <a href="{{ path('firmware') }}">version that uses a hardcoded C configuration</a> since there are many
                use cases where the user does
                not have Android, or just wants to have a configuration like this per se, keeping in mind that ESP8266 has no bluetooth.
            </p>
            <br><br>

            <h4>Configuring a Screen and WiFi</h4>
            In 3 steps make a demo Screen<br><br>
            <ol>
                <li><b>Logged in CALE Admin section "WiFi"</b><br>Add 2 access points where the display can get online (ex. home WiFi, mobile hotspot)</li>
                <li><b>Add an API</b><br>Just add your Google Calendar or to start a HTML API with an image or title as content</li>
                <li><b>On the Screen config, select what WiFis you are going to use</b><br>This will generate a JSON configuration string.<br>
                    In <b>Screen <span class="glyphicon glyphicon-arrow-right"></span> Content partials</b> add the API that you created in point 2</li>
            </ol><br>

            <h4>Send this configuration with Bluetooth to your ESP32 display</h4>
            <b>Configuring the firmware boils down to 2 steps:</b><br><br>
            <ol>

                <li><b>Install the Android app</b><br>As a first step connect it with CALE scanning the QR code.<br>
                    In the Backend: <b>User <span class="glyphicon glyphicon-arrow-right"></span> Api QR code</b>
                </li>
                <li><b>Select the Screen and the ESP32 Bluetooth target to configure in the app</b><br>Check that the JSON config is there and Send it to your device</li>
            </ol>

            Make sure that before point 3, the display is connected, and waiting for Bluetooth configuration.

            <a id="a3"></a>
            <h4 style="margin-top:4em"><span class="cale" style="font-weight:bolder">CALE</span> Android application</h4>

            <br style="margin-top:3em">Please download the APK with your mobile browser and give it permissions:<br>
            <h3><a href="{{ cale_android }}" target="_blank"><span class="cale" style="font-weight:bolder">CALE</span>Android in Play store</a></h3>
            <h4><a href="{{ cale_android_apk }}" target="_blank"><span class="cale" style="font-weight:bolder">CALE</span> Android APK Releases</a>
                Please use this version to get the latest APK if your version is < 1.1.3 and it does not come automatically from the Play store</h4>

        </div>
        <div class="col-md-5">
            <a href="{{ cale_android }}" target="_blank" title="Connect scanning QR">
                <img src="/assets/www/firmware/cale_app_1.jpg" style="border: 1px solid #333333" alt="CALE Android app" class="pull-right"></a>
            <small class="pull-right">Step 1: Connect App with cale.es scanning QR</small>

            <a href="{{ cale_android }}" target="_blank" title="Select your Screen">
                <img src="/assets/www/firmware/cale_app_2.jpg" style="border: 1px solid #333333" alt="CALE Android app" class="pull-right"></a>
            <small class="pull-right">Step 2: Select your Screen</small>

            <a href="{{ cale_android }}" target="_blank" title="Select ESP32 target">
                <img src="/assets/www/firmware/cale_app_blue.jpg" style="border: 1px solid #333333;margin-top: 2em" alt="CALE Android app" class="pull-right"></a>
            <small class="pull-right">Step 3: With bluetooth open select ESP32</small>

            <a href="{{ cale_android }}" target="_blank" title="Done!">
                <img src="/assets/www/firmware/cale_app_end.jpg" style="border: 1px solid #333333;margin-top: 2em" alt="CALE Android app" class="pull-right"></a>
            <small class="pull-right">Step 4: Send and DONE! Your Eink should refresh</small>
        </div>
    </div>

    <a id="repo"></a>
    <div class="row">
        <div class="col-md-7">
    <h3 style="margin-top:3em">Repository with the Bluetooth version of the Firmware</h3>

    <h4><a href="https://github.com/martinberlin/eink-calendar/tree/cale_ble">https://github.com/martinberlin/eink-calendar</a> - cale_ble branch</h4>
    Ready to be tested: <br>
    <ol>
        <li>Receives 2 WiFi APS, screen_url and bearer token</li>
        <li>Saves this on preferences for next restart</li>
        <li>TODO: Still missing a way to reset preferences</li>
    </ol>
    The small issue with point 3 is that once WiFi is connected Bluetooth is disconnected, since the ESP32 uses the same Antenna for both.
    So if we want a reset method, it should either "hear via UDP or http" a reset signal, or be started with a GPIo on LOW so we can detect this
    and reset credentials. Temporary solution if you want to force preferences removal:
    <pre>
     // Uncomment to force delete preferences
     // preferences.clear();
    </pre>
    </div>
        <div class="col-md-5">

        </div>
    </div>

    <a id="a2"></a>

    <h4 style="margin-top:3em">Config reference</h4>
    <p>It's important to note that since should send the Bluetooth configuration from an Android app,
        the only thing to is to Scan the QR. The App will take care of listing your Screens and prepare the JSON configuration to send to the ESP32.<br>
        As a preamble log in CALE Backend area and:<br>

        <ol>

    <li><b>Use the WiFi section</b> to add at least one WiFi access point (Ex. home/office)</li>
    <li><b>Go to Screen</b> and on the list click on <b>Config</b>.</li>
    <li><b>The Bluetooth tab</b> is the default and in a mobile request will come at the top.</li>
    <li>First two WiFi access points will be preselected, this is already send by the Android App automatically, no need to copy and paste</li>
</ol>


    </p>
    <img src="/assets/www/firmware/screen_config1.png" alt="CALE Bluetooth config" width="100%">


     Start the Display, in the app
    select the Bluetooth starting with CALE_* and paste the JSON text in the next step.
    That's it. The display should restart, connect to WiFi, and render your Screen.


    <a id="flow"></a>
    <h4 style="margin-top:3em">Bluetooth user flow</h4>
    <img src="/assets/svg/cale-bluetooth-config.svg" alt="CALE user flow for Bluetooth config" width="100%">


    {#<br><br>
    <small>User agent: {{ app.request.headers.get('User-Agent') }}</small>
    #}
{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="/js/engine/common.js"></script>
{% endblock %}