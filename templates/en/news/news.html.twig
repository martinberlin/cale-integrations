{% extends '/base.html.twig' %}
{% set carousel_high = 110 %}

{% block stylesheets %}
    <style>
        #myCarousel.carousel {
            height: {{ carousel_high }}px;
        }
        #myCarousel .item {
            height: {{ carousel_high }}px; width: 100%;
            background-color: #333;
        }
    </style>
{% endblock stylesheets %}
{% block carousel %}
    {% include "/partials/carousel.html.twig" %}
{% endblock carousel %}

{% block body %}
    <div class="col-md-8 col-sm-8 col-xs-12" style="margin-top: -2em">
        <h3>
            <span class="cale" style="font-weight:bold">CALE News</span>
        </h3>
        <div class="row">
            <div class="col-md-7 col-xs-12">
                <h4>ESP-IDF version 1.0 of the Firmware ready</h4>
            </div>
            <div class="col-md-5 col-xs-12 text-right cale" style="margin-top:0.6em;font-weight:bold">
                <h5>SUN 21, JUN ´20</h5>
            </div>
        </div>
        <p><img src="/assets/svg/logo/cale-idf.svg" align="left" style="margin-right: 2em">The Espressif IoT Development Framework (esp-idf) version of our firmware is ready to be tested:<br>
            <a href="https://github.com/martinberlin/cale-idf">https://github.com/martinberlin/cale-idf</a><br>Nightly branch: <b>refactor/oop</b>  Stable: master<br><br>
            It took long development weeks but was time well spent. This version is working faster than Arduino-framework version and is using our own CalEPD epaper component.
            Only using our own component it was possible to make SPI communication faster. Last measurements for an 800*480 1 bit image was 800 ms download plus 2200 ms rendering.
            That means that you can get the image pixel buffer sent to the display in about 3 seconds.<br>
            <b>Known limitations:</b> No bluetooth support, configuration must be defined before compilation.
            The Bearer security token is not there yet so if you want to try it the Screen should be set to public.
            <br>Additional development efforts that are available as independant IDF components:<br>
            <ol>
            <li><a href="https://github.com/martinberlin/CalEPD">CalEPD - Epaper ESP-IDF component</a></li>
            <li><a href="https://github.com/martinberlin/Adafruit-GFX-Library-ESP-IDF">Adafruit GFX graphics core component for ESP-IDF</a></li>
            </ol>
        This components are the core of the <span class="cale" style="font-weight:bold">Cale-idf</span> Firmware but can be used as components working together for your own firmware. Please check the detailed
        instructions in the repository on how to compile it. It's quite easy, even more than Arduino version, since just needs Display configuration and CALE bitmap URL.<br>
        <pre>
 idf.py menuconfig
 idf.py flash monitor</pre>
        </p>
        <div class="row">
            <div class="col-md-7 col-xs-12">
                <h4>New epaper display of 12.48 inches added</h4>
            </div>
            <div class="col-md-5 col-xs-12 text-right cale" style="margin-top:0.6em;font-weight:bold">
                <h5>WED 10, JUN ´20</h5>
            </div>
        </div>
        <p>
            <img src="/assets/display/Waveshare-12.jpg" align="center"><br>
            This new composite eink Firmware from the firma Waveshare is still in research phase. It's already added as an output display. We find this
            composite epaper display technology amazing, internally has 4 interconnected displays, that share MOSI and CLK.
            There is <a href="https://github.com/martinberlin/esp32-epaper-12.48-waveshare" target="_blank">an example from the provider</a> but we are actively working in making the WiFi download from this web-service
            a possibility at the end of June.<br>
            As an extra development since the end of Mai we are working in an Espressif IDF driver to be able to control exactly what is being
            sent to the epaper displays using ESP32 as an SPI master in the communication. Check the next news release for the repository address.
        </p>
        <div class="row">
            <div class="col-md-7 col-xs-12">
                <h4>ESP8266/ESP32 non Bluetooth version updated</h4>
            </div>
            <div class="col-md-5 col-xs-12 text-right cale" style="margin-top:0.6em;font-weight:bold">
                <h5>WED 13, MAI ´20</h5>
            </div>
        </div>
        <p><a href="http://cale.es/firmware"><span class="cale">CALE</span> original Firmware</a>,
            the one that was done after the <a href="https://hackaday.io/project/169086" target="_blank">Eink Hackaday project</a>,
            with hardcoded configuration and support for the ESP8266 has been updated.<br>
        Now it supports Service times, so it won't refresh at nights, and also goes to sleep as soon as the Epaper is rendered.
        One user reported up to 45 days of operational time with a 2200 mA/hr Lion battery.
            In his case the Eink was refreshed every 3 hours giving an aprox. consumption of 49 mA per day.
            With this new update that will make less refresh times per day, as per your <a href="#service_times">Service Times settings</a>, we expect the
            battery lifetime be even longer.<br>
        <h4>Four Epaper refresh Firmware is on the way</h4>
        Based on a technology developed by Waveshare, we are going to support bigger Eink screens, that are composed internally by 4 displays.
        This will enable us to render our screens in an astonishing resolution of
        1304×984 pixels on a 12.48 inches Epaper display. Being almost A4 sized, that's so far the biggest epaper display, we've dealt with so far.
        </p>
        <div class="row">
            <div class="col-md-6 col-xs-12">
                <h4>A new Epaper is coming soon</h4>
            </div>
            <div class="col-md-6 col-xs-12 text-right cale" style="margin-top:0.6em;font-weight:bold">
                <h5>WED 29, APRIL ´20</h5>
            </div>
        </div>
        <p>The awesome Inkplate 6 with a Kindle screen of 800*600 pixels is added to our
            <a href="{{ path('displays-eink') }}">supported Epaper displays</a>
        </p>
        <div class="row">
            <div class="col-md-6 col-xs-12">
                <h4>A new weather API: OpenWeather</h4>
            </div>
            <div class="col-md-6 col-xs-12 text-right cale" style="margin-top:0.6em;font-weight:bold">
            <h5>TUE 28, APRIL ´20</h5>
            </div>
        </div>

        <p><a href="https://openweathermap.org/api" target="_blank">OpenWeather API</a> is integrated and ready to be configured.<br>
            It's easy to add, just get an Api key in their site and in our backend go to
            <b>Content <span class="glyphicon glyphicon-arrow-right"></span> Add API</b>
            and paste the key. And then add this api as a content partial in your Screen.<br>

            There is something new also that users in the USA requested: <b>Temperature units</b><br>
            </p>
        <ul><li>Metric - our usual EU Degrees ( C° )</li><li>Imperial - The imperium Farenheits ( F° )</li></ul>

        <blockquote class="twitter-tweet"><p lang="en" dir="ltr">I added <a href="https://twitter.com/OpenWeatherMap?ref_src=twsrc%5Etfw">@OpenWeatherMap</a> API to <a href="https://t.co/BOdI8uxQ0w">https://t.co/BOdI8uxQ0w</a> here a short preview:<br>
                <span class="glyphicon glyphicon-arrow-left"></span> Left DarkSky<br>
                <span class="glyphicon glyphicon-arrow-right"></span>Right OpenWeather
                <a href="https://t.co/m7ndiZv0Pr">pic.twitter.com/m7ndiZv0Pr</a></p>&mdash; Martin the Creator (@martinfasani)
            <a href="https://twitter.com/martinfasani/status/1255026612501983232?ref_src=twsrc%5Etfw">April 28, 2020</a></blockquote>

        <p>We think it has not as much information as the old DarkSky, that had a cool one day prediction sentence,
            like "Today will rain till tuesday" among other things like sunrise and sunset time.</p>
        <p>Or at least we did not find it. But it's enough to have Temperature and Humidity prediction for the next hours to see
            if you need to take the umbrella or not. It does it's job and it's free so we decided to implement first.
        There are another interesting weather Apis, but we will take action, only if at least some users
            ask to add them to their Screens.

        </p>
        <h4>TFT Firmware update</h4>
        <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Here an example of how can you steal 40 mins of your sleep time:<br>Add a simple progress bar to a image download in <a href="https://twitter.com/hashtag/esp32?src=hash&amp;ref_src=twsrc%5Etfw">#esp32</a> ;)<a href="https://t.co/Ht2uP4jV25">https://t.co/Ht2uP4jV25</a> <a href="https://t.co/7TbgytJcto">pic.twitter.com/7TbgytJcto</a></p>&mdash; Martin the Creator (@martinfasani) <a href="https://twitter.com/martinfasani/status/1255250771429466115?ref_src=twsrc%5Etfw">April 28, 2020</a></blockquote>
        <p>The TFT Firmware is now stable to use.
            This is a demo for anyone that wants to implement a welcome Screen in his project.
            It enables our Users to ship a product where you they can announce a Firmware update or any other dynamically requested image,
            that you control from <span class="cale">CALE BACKEND</span>, making it easy for the developer to update it any time he wants.
            Please note that we are not focusing our developments efforts in TFT output and this is a side project only.
            That's why this version does not have Bluetooth to receive configuration from <span class="cale">CALE APP</span>.
            Our main focus will be to have a low consumption Eink Firmware. This TFT Firmware is basically an example that you
        can follow to use our backend web-service and provide fresh JPG images in your projects.</p>

        <h4>EINK Firmware update</h4>
        <p><a href="https://fasani.de">Martin</a>, our <span class="cale">CALE Firmware Developer</span>, found a flaw in the Firmware that got an update last weekend.
            It was not going to sleep when it wakes up out of the Service Times.
            <a id="service_times"></a><br><br><br><br>
            <h4>The Service Times concept</h4>
            You set a predefined time period where your display should refresh.
            The display wakes up and pings cale, the actual URL is your screen URL with /st at the end.

            This route returns just one byte: 0 or 1.&nbsp; On 1 your display should be the seconds connected till downloading
            your image and rendering it. Then goes to sleep another round.
            Now on 0, it just wakes up that second, and goes to sleep again saving your battery like 10 seconds of high consumption
            and your display from a refresh when you are sleeping. </p>
        <p>And on 0 was not sleeping. Now is fixed and if the Firmware is updated it can stay longer time working.
            So for those of you that can update the Firmware, please do it.
            Our estimations are that the Service Time can increase battery lifetime at least 20% or more depending on your setups.
            <h4>The 10 pix left margin issue</h4>
            <img style="border:1px solid black;float:right;margin-left:1em;margin-bottom:2px" src="/img/www/news/screen-10-pix.jpg">
           We don't want to take a decision that will affect all User Screens without asking for permission.
        So we asked about feedback in our last newsletter and we are working in a solution.
        </p>

    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4 col-xs-12"></div>
        <div class="col-md-4 col-sm-4 col-xs-12 text-center">
            <button type="button" class="btn btn-success form-control" onclick="window.location='{{ path('register') }}'">
                Register here to receive the newsletter</button>
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="/js/engine/common.js"></script>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
{% endblock %}