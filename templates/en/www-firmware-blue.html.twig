{% extends '/base.html.twig' %}
{% set carousel_high = 110 %}

{% block stylesheets %}
    <style>
        #myCarousel.carousel {
            height: {{ carousel_high }}px;
        }
        #myCarousel .item {
            height: {{ carousel_high }}px; width: 100%;
            background-color: #333;
        }
        body {
            background-color: #e0e0e0;
            color:black;
        }
    </style>
    {# Datatables include let's make this one line #}
        <link href="/js/datatables/datatables.css" rel="stylesheet">
        <script src="/js/jquery/jquery-2.1.0.min.js"></script>
        <script type="text/javascript" src="/js/datatables/datatables.min.js"></script>
{% endblock stylesheets %}

{% block carousel %}
    {% include "/partials/carousel.html.twig" %}
{% endblock carousel %}

{% block body %}

    <h3>Configuring the Firmware using Bluetooth</h3>

    <div class="row">
        <div class="col-md-6">
    <div class="panel panel-default" style="margin-top: 1em">
                <div class="panel-heading">Quick access:</div>
                <div class="panel-body">
    <ul>
        <li><a href="#a1">Quick start with Bluetooth</a></li>
        <li><a href="#repo">Repository - cale_ble</a></li>
        <li><a href="#a2">Config reference</a></li>
        <li><a href="#a3">Android application</a></li>
        <li><a href="{{ path('firmware') }}">Back to main Firmware section</a></li>
    </ul>

    </div></div>
            <a id="a1"></a><br>
            <p style="margin-top:4em">
                We are currently in the process of reshaping and making the Firmware configuration easier.
                The goal is to make the configuration using an Android app the default way to set up your display. But we will
                always keep the possibility to have also a hardcoded C configuration since there are many use cases where user do
                not have Android, or they just want to have a hardcoded configuration per se.
            </p>
            <br><br>
            <b>Basically the Bluetooth configuration boils down to 3 steps</b>
            <ol>
                <li><b>Logged in CALE Admin section "WiFi"</b>, add the access points where the display can get online</li>
                <li><b>On the Screen config, select what WiFis you are going to use</b>, this will generate a JSON configuration string</li>
                <li><b>Select the ESP32 Bluetooth in the Android app</b> and in next step copy the previous JSON in the textarea of the Android app. Click <b>"Send config". DONE</b></li>
            </ol>

            Make sure that before point 3, the display is connected, and waiting for Bluetooth configuration.
    </div>
        <div class="col-md-6">
            <img src="/assets/www/firmware/cale_app.jpg" style="border: 1px solid #333333" alt="CALE Android app" class="pull-right">
        </div>
    </div>

    <a id="repo"></a>

    <br style="margin-top:3em">The open source Firmware is here:<br>

    <h4><a href="https://github.com/martinberlin/eink-calendar/tree/cale_ble">https://github.com/martinberlin/eink-calendar</a> - cale_ble branch</h4>
    Ready to be tested: <br>
    <ol>
        <li>Receives 2 WiFi APS, screen_url and bearer tokes</li>
        <li>Saves this on preferences for next restart</li>
        <li>TODO: Still missing a way to reset preferences</li>
    </ol>
    The small issue with point 3 is that once WiFi is connected Bluetooth is disconnected, since the ESP32 uses the same Antenna for both.
    So if we want a reset method, it should either "hear via UDP or http" a reset signal, or be started with a GPIo on LOW so we can detect this
    and reset credentials.

    <a id="a2"></a>

    <h4 style="margin-top:3em">Config reference</h4>
    <p>It's important to note that as you have to send this from an Android app, it will be the best just to
        login into CALE admin area on the mobile.
        Then go to Screen and on the list click on <b>Config</b>.
        The Bluetooth tab is the default.
        The only pre-requsite is to select the right WiFi access points, first two will be preselected. </p>
    <img src="/assets/www/firmware/screen_config1.png" alt="CALE Bluetooth config">


    In this tab just click on the textarea to select all the text, copy it in the clipboard. Start the Display, in the app
    select the Bluetooth starting with CALE_* and paste the JSON text in the next step.
    That's it. The display should restart, connect to WiFi, and render your Screen.

    <br><br>
    <small>User agent: {{ app.request.headers.get('User-Agent') }}</small>

    <a id="a3"></a>
    <h4 style="margin-top:3em"><span class="cale">CALE</span> Android application</h4>

    <br style="margin-top:3em">Please download the APK with your mobile browser and give it permissions:<br>

    <h4><a href="https://github.com/martinberlin/cale-app/tree/master/releases" target="_blank">CALE Android APK</a></h4>

    The CALE Android app was sent to approval in Google's developer center on 1st April 2020. Due to the corona-virus
    current situation it may take up to 10 days to get approved. Please try it out installing the signed APK into your
    mobile till it hits the official Play store.


    <a id="flow"></a>
    <h4 style="margin-top:3em">Bluetooth user flow</h4>
    <img src="/assets/svg/cale-bluetooth-conf.svg"><br>

{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="./js/engine/common.js"></script>
{% endblock %}